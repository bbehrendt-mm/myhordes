#!/bin/bash

# Reading ENV file
if test ! -f ".env.deploy"; then
  echo "Missing deployment file: .env.deploy"
  exit 1
fi

. ./.env.deploy

_SSH="${DEPLOY_AS:?}@${DEPLOY_TO:?}"
_TEMP="${LOCAL_TEMP:?}/mh_deploy"
_UPDATE_PACKAGE="${_TEMP:?}.tar.gz"

# Confirmation
printf "Deploying MyHordes
  From: '%s', branch '%s'
  To: '%s', environment '%s'
" "${DEPLOY_FROM:?}" "${DEPLOY_BRANCH:?}" "$_SSH" "${DEPLOY_ENV:?}"

read -p "Confirm? (y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 2
fi

# Create cache directory
if test -d "${_TEMP}";
then
  echo "-> Temp directory already exists, cleaning it up..."
  rm -rf "${_TEMP:?}"
  mkdir "${_TEMP}"
else
  echo "-> Creating temp directory..."
  mkdir "${_TEMP}"
fi

echo "-> Fetching a fresh MyHordes installation..."
git clone -b "${DEPLOY_BRANCH}" --single-branch "${DEPLOY_FROM}" "${_TEMP}" || { echo 'Failed!' ; exit 6; }
printf "APP_ENV=%s\nAPP_SECRET=e3601fb7c31de7e24ed02e3a25d9b571\nDATABASE_URL=mysql://myhordes:myh0rd3s@db:3306/myhordes?serverVersion=5.7" "${DEPLOY_ENV:?}" > "${_TEMP}/.env"
echo "deploybot" > "${_TEMP}/public/maintenance/.active"
git --git-dir="${_TEMP}/.git" rev-list HEAD > "${_TEMP}/.vslist"

_VNUM_FULL="$(git --git-dir="${_TEMP}/.git" describe --tags)"
_VNUM_ABBR="$(git --git-dir="${_TEMP}/.git" describe --tags --abbrev=0)"

if [ "${_VNUM_FULL}" = "${_VNUM_ABBR}" ]; then
  _VNUM="${_VNUM_FULL}"
else
  echo "-> The version numbers are"
  echo "1: ${_VNUM_FULL}"
  echo "2: ${_VNUM_ABBR}"
  # Version select
  read -p "Select version number to use (1/2)" -n 1 -r
  echo ""
  if [[ $REPLY =~ ^[1]$ ]]; then
    _VNUM="${_VNUM_FULL}"
  elif [[ $REPLY =~ ^[2]$ ]]; then
    _VNUM="${_VNUM_ABBR}"
  else
      echo "Invalid."
      exit 2
  fi
fi

echo "-> The version number is"
echo "${_VNUM}"
echo "${_VNUM}" > "${_TEMP}/VERSION"

echo "-> Fetching 3rd party packages..."
if [ "${DEPLOY_ENV:?}" = "prod" ];
then
  composer install --no-dev --optimize-autoloader --working-dir "${_TEMP}" || { echo 'Failed!' ; exit 6; }
else
  composer install --working-dir "${_TEMP}" || { echo 'Failed!' ; exit 6; }
fi
yarn --cwd "${_TEMP}" install || { echo 'Failed!' ; exit 6; }

if test -f "webpack.config.deploy.js";
then
  echo "-> Applying deployment webpack configuration..."
  cp "webpack.config.deploy.js" "${_TEMP}/webpack.config.local.js"
fi

echo "-> Compiling..."
yarn --cwd "${_TEMP}" encore "${DEPLOY_ENV:?}" || { echo 'Failed!' ; exit 6; }

echo "-> Removing unneeded files..."
rm -rf "${_TEMP:?}/var"
rm -rf "${_TEMP:?}/.git"
rm -rf "${_TEMP:?}/.gitlab"
rm -rf "${_TEMP:?}/config/packages/${DEPLOY_ENV:?}/app"
rm -rf "${_TEMP:?}/node_modules"

echo "-> Creating update package..."
if test -f "${_UPDATE_PACKAGE}";
then
  rm -rf "${_UPDATE_PACKAGE}"
fi
(cd "${_TEMP:?}" && tar -zcf "${_UPDATE_PACKAGE}" ".")

# Confirmation
echo "Local operations complete. We're about to begin operating on the remote server."
read -p "Continue? (y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 2
fi

_PACKAGE_NAME=$(printf '%s-%04d' "$(date +"%d-%m-%y_%H-%M-%S")" $(( RANDOM % 10000 )))
_NEW_VERSION="${REMOTE_PATH_VERSION_REPOSITORY}/${_PACKAGE_NAME}"

echo "-> Running SSH Agent..."
eval $(ssh-agent) > /dev/null
ssh-add

echo "-> Sending installation package to remote server..."
scp "${_UPDATE_PACKAGE}" "${_SSH}:${REMOTE_PATH_VERSION_REPOSITORY}/package.tar.gz"
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_VERSION_REPOSITORY}\" && mkdir ${_PACKAGE_NAME} && cd ${_PACKAGE_NAME} && tar -xf \"${REMOTE_PATH_VERSION_REPOSITORY}/package.tar.gz\" && rm -rf \"${REMOTE_PATH_VERSION_REPOSITORY}/package.tar.gz\""

echo "-> Linking configuration into the newly created installation..."
ssh -t "${_SSH}" "cd \"${_NEW_VERSION}\" && ln -s \"${REMOTE_PATH_CONFIG}/env\" .env.local && ln -s \"${REMOTE_PATH_CONFIG}/app\" ./config/packages/${DEPLOY_ENV:?}/app && ln -s \"${REMOTE_PATH_STORAGE}\" ./var"

# Confirmation
echo "Setup complete, ready to update the server to the new version."
read -p "Continue? (y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 2
fi

_BIN_CONSOLE="sudo -u ${REMOTE_WEBSERVER_USER} -g ${REMOTE_WEBSERVER_GROUP} php bin/console"

echo "-> Freezing the current installation..."
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT:?}\" && ${_BIN_CONSOLE} app:migrate --maintenance on && touch public/maintenance/.active"

# Confirmation
echo "Ready to migrate."
read -p "Continue? (y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 2
fi

echo "-> Creating backup and clearing cache..."
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT:?}\" && sleep 5s && ${_BIN_CONSOLE} app:cron backup update"
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT:?}\" && sleep 5s && ${_BIN_CONSOLE} cache:clear && rm -rf \"${REMOTE_PATH_STORAGE:?}/cache/${DEPLOY_ENV:?}\""

echo "-> Updating symlink"
ssh -t "${_SSH}" "ln -s \"${_NEW_VERSION}\" \"${REMOTE_PATH_ENTRYPOINT:?}__TMP\" && mv -Tf \"${REMOTE_PATH_ENTRYPOINT:?}__TMP\" \"${REMOTE_PATH_ENTRYPOINT:?}\""

echo "-> Running migration..."
ssh -t "${_SSH}" "chown -R ${REMOTE_WEBSERVER_USER}:${REMOTE_WEBSERVER_GROUP} \"${_NEW_VERSION}\" && chown -R ${REMOTE_WEBSERVER_USER}:${REMOTE_WEBSERVER_GROUP} \"${REMOTE_PATH_STORAGE}\""
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT}\" && ${_BIN_CONSOLE} app:migrate -u -r && ${_BIN_CONSOLE} app:migrate -p -v"

# Confirmation
echo "Ready to activate the new installation at:"
echo "${_NEW_VERSION}"
read -p "Continue? (y/n)" -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 2
fi

echo "-> Activating new installation"
ssh -t "${_SSH}" "service php8.1-fpm restart"
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT:?}\" && sleep 5s && ${_BIN_CONSOLE} cache:clear && rm -rf \"${REMOTE_PATH_STORAGE:?}/cache/${DEPLOY_ENV:?}\""
ssh -t "${_SSH}" "cd \"${REMOTE_PATH_ENTRYPOINT:?}\" && ${_BIN_CONSOLE} app:migrate --maintenance off"

echo "-> Removing temporary local data"
rm -rf "${_TEMP:?}"
rm -rf "${_UPDATE_PACKAGE}"