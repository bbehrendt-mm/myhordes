security:
    providers:
        users:
            entity:
                class: 'App\Entity\User'
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            entry_point: App\Security\AjaxAuthenticator
            lazy: true
            logout:
                path: auto_logout
                target: /
            switch_user: { role: CAN_IMPERSONATE }

            custom_authenticators:
              - App\Security\AjaxAuthenticator
              - App\Security\EternalAuthenticator
              - App\Security\RememberMeAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_USER:      ROLE_REGISTERED
        ROLE_ELEVATED:  ROLE_USER
        ROLE_TEAM:      ROLE_USER
        ROLE_DEV:       ROLE_USER
        ROLE_ANIMAC:    ROLE_ELEVATED
        ROLE_ORACLE:    ROLE_ELEVATED
        ROLE_CROW:      ROLE_ELEVATED
        ROLE_SUB_ADMIN: [ROLE_CROW, ROLE_ORACLE, ROLE_ANIMAC, ROLE_TEAM]
        ROLE_ADMIN:     ROLE_SUB_ADMIN
        ROLE_SUPER:     ROLE_ADMIN

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Web Access
        - { path: ^/$, roles: PUBLIC_ACCESS }

        # AJAX Access
        - { path: ^/jx/landing,     roles: PUBLIC_ACCESS }
        - { path: ^/jx/public/,     roles: PUBLIC_ACCESS }
        - { path: ^/jx/ghost/,      roles: ROLE_USER }
        - { path: ^/jx/soul/,       roles: ROLE_USER }
        - { path: ^/jx/pm/,         roles: ROLE_USER }
        - { path: ^/jx/admin/cst/,  roles: ROLE_USER }
        - { path: ^/jx/admin/com/dash,  roles: PUBLIC_ACCESS }
        - { path: ^/jx/admin/com/,  roles: ROLE_ELEVATED }
        - { path: ^/jx/admin/,      roles: ROLE_CROW }
        - { path: ^/admin/,         roles: ROLE_CROW }

        # API Access
        - { path: ^/api/public/login,  roles: ROLE_REGISTERED }
        - { path: ^/api/public/logout, roles: ROLE_REGISTERED }
        - { path: ^/api/soul/,         roles: ROLE_USER }
        - { path: ^/api/pm/ping,       roles: [ROLE_REGISTERED, PUBLIC_ACCESS]}
        - { path: ^/api/pm/,           roles: ROLE_USER}
        - { path: ^/api/public/,       roles: PUBLIC_ACCESS }
        - { path: ^/api/admin/login,   roles: PUBLIC_ACCESS }
        - { path: ^/api/admin/cst/,    roles: ROLE_USER }
        - { path: ^/api/admin/com/,    roles: ROLE_ELEVATED }
        - { path: ^/api/admin/,        roles: ROLE_CROW }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
