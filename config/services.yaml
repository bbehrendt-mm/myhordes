# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

imports:
    - { resource: 'app/*.yml' }

twig:
    globals:
        all_languages:
          de: 'de_DE'
          en: 'en_US'
          fr: 'fr_FR'
          es: 'es_ES'
        user_handler: '@App\Service\UserHandler'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # Enable ContainerInterface in Symfony 6
    Symfony\Component\DependencyInjection\ContainerInterface: '@service_container'

    # Use our own event dispatcher instead of the default one
    app.decoration.event_dispatcher:
      class: App\Event\SelectiveEventDispatcher
      decorates: event_dispatcher
      public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # Set Twig extensions
    App\Twig\HTMLUtils:
      tags: ['twig.extension']
    App\Twig\Extensions:
      tags: ['twig.extension']
    App\Twig\Encore:
      tags: ['twig.extension']

    # Set some services to be public
    App\Service\CitizenHandler:
        public: true
    App\Service\DeathHandler:
        public: true
    App\Service\UserHandler:
        public: true
    App\Service\InventoryHandler:
        public: true
    App\Service\ItemFactory:
        public: true
    App\Service\TownHandler:
        public: true
    App\Service\HTMLService:
        public: true
    App\Service\ZoneHandler:
        public: true

    # This aliases the classes used by the translation tool commands
    translation.tools.loader:
      alias: 'translation.loader.yml'
      public: true
    translation.tools.dumper:
      alias: 'translation.dumper.yml'
      public: true

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # Some classes need the fully featured translator class instead of
    # just the interface, in order to set a locale
    App\Command\CronCommand:
      arguments:
        $translator: '@app.decoration.translator.inner'
        $db: '%env(url:DATABASE_URL)%'

    # The NightlyHandler should have its own log channel
    App\Service\NightlyHandler:
        tags:
          - { name: monolog.logger, channel: night }

    # Admins controllers should have their own log channel
    # App\Controller\Admin\:
    #     resource: '../src/Controller/Admin'
    #     tags:
    #       - { name: monolog.logger, channel: admin }
    App\Service\AdminLog:
      public: true
      tags:
        - { name: monolog.logger, channel: admin }

    App\Command\DebugCommand:
        arguments:
            $translator: '@app.decoration.translator.inner'

    App\Command\Debug\CouncilTestCommand:
      arguments:
        $translator: '@app.decoration.translator.inner'

    App\Command\Town\TownInspectorCommand:
        arguments:
            $translator: '@app.decoration.translator.inner'

    App\Command\Town\TownCreateCommand:
        arguments:
            $translator: '@app.decoration.translator.inner'

    App\EventSubscriber\DebugSubscriber:
        tags: []
        autoconfigure: false

    # TimeKeeperService should not keep the attack going for 20 minutes after
    # it has finished processing in dev mode, so we need to pass the environment
    App\Service\TimeKeeperService:
        arguments:
            $env: '%kernel.environment%'

    # GameProfileService does not perform version gating in dev environments, so we need to
    # pass the env
    App\Service\GameProfilerService:
      arguments:
        $env: '%kernel.environment%'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # Symfony\Component\Translation\Extractor\PhpExtractor:
    #   tags:
    #     - { name: translation.extractort, alias: 'none', priority: 0 }

    app.decoration.translator:
      class: App\Translation\ICUTranslator
      decorates: translator.default
      arguments: ['@app.decoration.translator.inner']
      public: false

    # This disables the default twig extractor
    twig.translation.extractor:
      abstract: true

    App\Translation\NameResolverVisitor:
      tags:
        - { name: translation.extractor.visitor, priority: 999 }
    App\Translation\TMethodVisitor:
      tags:
        - { name: translation.extractor.visitor }
    App\Translation\FixtureVisitor:
      tags:
        - { name: translation.extractor.visitor }
    App\Translation\DatabaseExtractor:
        tags:
            - { name: translation.extractor, alias: 'db' }
    App\Translation\ExpandedTwigExtractor:
        tags:
            - { name: translation.extractor, alias: 'twig' }
    App\Translation\ConfigExtractor:
        tags:
            - { name: translation.extractor, alias: 'config' }

    app.decoration.trans_dumper:
      class: App\Translation\ExpandedDumper
      decorates: translation.dumper.yml
      arguments: [ '@app.decoration.trans_dumper.inner' ]
      public: false

    App\Configuration\LegacyCoreConfigurationProvider:
      tags: [ { name: 'myhordes.configuration.myhordes', priority: 0 } ]
      arguments: ['%myhordes%', '%local%']

    App\Configuration\LegacyRulesConfigurationProvider:
      tags: [ { name: 'myhordes.configuration.rules', priority: 0 } ]
      arguments: [ '%rules%', '%rules_local%' ]

    App\Configuration\LegacyEventConfigurationProvider:
      tags: [ { name: 'myhordes.configuration.events', priority: 0 } ]
      arguments: ['%events%']

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - '%env(DATABASE_URL)%'

    app.hooks_registry:
        class: App\Hooks\HookRegistry