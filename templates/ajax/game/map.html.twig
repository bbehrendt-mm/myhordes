<div class="map_area {% if default_show_zone %}zone-viewer-mode{% endif %}">
    {% if not conf.isNightTime %}
        {% set css = 'day' %}
    {% else %}
        {% set css = 'night' %}
    {% endif %}

    <div class="map {{ css }} {% if not in_town %}show-global{% endif %}">
        {% set cellnum = 1+map.map_x1-map.map_x0 %}
        {% set size = 100.0/cellnum %}

        <div class="frame-plane">
            <div class="tl"></div><div class="tr"></div><div class="bl"></div><div class="br"></div>
            <div class="t0l"></div><div class="t1"></div><div class="t0r"></div>
            <div class="l0t"></div><div class="l1"></div><div class="l0m"></div><div class="l0b"></div><div class="l2"></div>
            <div class="r0t"></div><div class="r1"></div><div class="r0b"></div>
            <div class="b"></div>
        </div>

        <div class="scroll-plane" x-default-size="{{ cellnum*20 }}" x-current-scroll-level="{{ default_zoom }}">
            <div class="svg">
                <svg viewBox="{{ map.map_x0 }} {{ map.map_y0 }} {{ 1+(map.map_x1-map.map_x0) }} {{ 1+(map.map_y1-map.map_y0) }}" xmlns="http://www.w3.org/2000/svg">
                    <g x-local-id="map-marker-layer"></g>
                    <g x-local-id="map-expedition-layer">
                        <g x-local-id="map-expedition-context"></g>
                        <g x-local-id="map-expedition-focus"></g>
                        <g x-local-id="map-expedition-live-editor"></g>
                    </g>
                </svg>
            </div>
            {% for y in map.map_y1..map.map_y0 %}
                {% for x in map.map_x0..map.map_x1 %}
                    {% if map.zones[x] and map.zones[x][y] %}
                        {% set classes = map.zones_classes[x][y] %}
                        <div class="{{ classes|join(' ') }}" style="width: {{ size }}%; padding-top: {{ size }}%" x-zone-x="{{ x }}" x-zone-y="{{ y }}">
                            {% if 'soul' in classes %}
                                <div class="soul-area"><span></span></div>
                            {% endif %}
                                <div class="icon"></div>
                                <div class="overlay"></div>
                                {% if not map.zones[x][y].tag is null and map.zones[x][y].tag.ref > 0 %}
                                    <div class="tag tag-{{map.zones[x][y].tag.ref}}"></div>
                                {% endif %}
                                {% if map.zones[x][y].discoveryStatus == constant('App\\Entity\\Zone::DiscoveryStateCurrent') and map.zones[x][y].zombieStatus == constant('App\\Entity\\Zone::ZombieStateExact') %}
                                    <div class="count">{% if map.zones[x][y].zombies > 0 %}{{ map.zones[x][y].zombies }}{% endif %}</div>
                                {% endif %}
                                {% if in_town and map.zones[x][y].citizens|length != 0 and not chaos %}
                                    <div class="citizen_marker"></div>
                                {% endif %}
                                <div class="tooltip tooltip-map">
                                    {% if map.zones[x][y].discoveryStatus > constant('App\\Entity\\Zone::DiscoveryStateNone') and map.zones[x][y].prototype %}
                                        <div class="row"><div class="cell rw-12 bold">
                                            {% if map.zones[x][y].buryCount > 0 %}
                                                {{ 'Verschüttete Ruine'|trans({},'game') }}
                                            {% else %}
                                                {{ map.zones[x][y].prototype.label|trans({}, 'game') }}
                                            {% endif %}
                                        </div></div>
                                    {% endif %}
                                    {% if x == 0 and y == 0 %}
                                        <div class="row"><div class="cell rw-12 bold">{{ map.zones[x][y].town.name }}</div></div>
                                    {% endif %}
                                    <div class="row">
                                        <div class="cell rw-6 left">{{ 'Zone'|trans({},'game') }}</div>
                                        <div class="cell rw-6 right">[{{ x }} / {{ y }}]</div>
                                    </div>
                                    <div class="row">
                                        <div class="cell rw-6 left">{{ 'Entfernung'|trans({},'game') }}</div>
                                        <div class="cell rw-6 right"><div class="ap">{{ (x - map.pos_x)|abs + (y - map.pos_y)|abs }}</div></div>
                                    </div>
                                    {% if in_town and map.zones[x][y].citizens|length != 0 and not chaos %}
                                        {% for resident in map.zones[x][y].citizens %}
                                            <div class="row">
                                                <div class="cell ro-6 rw-6 right">{{ resident.name }}</div>
                                            </div>
                                        {% endfor %}
                                    {% endif %}
                                    {% if map.zones[x][y].discoveryStatus == constant('App\\Entity\\Zone::DiscoveryStateCurrent') %}
                                        {% if map.zones[x][y].zombies > 0 and map.zones[x][y].zombies <= 2 %}
                                            <div class="row">
                                                {{'Isolierte Zombies'|trans({}, 'game')}}
                                            </div>
                                        {% elseif map.zones[x][y].zombies > 2 and map.zones[x][y].zombies <= 5 %}
                                            <div class="row">
                                                {{'Die Zombies verstümmeln'|trans({}, 'game')}}
                                            </div>
                                        {% elseif map.zones[x][y].zombies > 5 %}
                                            <div class="row">
                                                {{'Horde der Zombies'|trans({}, 'game')}}
                                            </div>
                                        {% endif %}
                                    {% endif %}
                                    {% if not map.zones[x][y].tag is null and map.zones[x][y].tag.ref > 0 %}
                                        <div class="row">
                                            {{map.zones[x][y].tag.label|trans({}, 'game')}}
                                        </div>
                                    {% endif %}
                                </div>

                        </div>
                    {% else %}
                        <div class="void" style="width: {{ size }}%; padding-top: {{ size }}%"></div>
                    {% endif %}

                {% endfor %}
            {% endfor %}
        </div>

        <div class="routes-plane hidden">
            <div>
                {% for route in map.routes %}
                    <div class="row" x-route-id="{{ route.id }}">
                        <div class="padded cell rw-12">
                            {{ route.label }} <div class="float-right"><div class="ap">{{ route.length }}</div></div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>

        {% if allow_zone_view %}
            <div class="zone-plane {% if not app.user.disableFx %}retro{% endif %}">
                {% if not app.user.disableFx %}
                <div class="retro-effect hide-lg hide-md hide-sm"></div>
                <div class="retro-effect hide-lg hide-md hide-sm"></div>
                <div class="retro-effect hide-lg hide-md hide-sm"></div>
                <div class="retro-effect hide-lg hide-md hide-sm"></div>
                <div class="retro-effect hide-lg hide-md hide-sm"></div>
                {% endif %}
                <div class="zone-sub-container">
                    {% for plane_y in 2..-2 %}
                        {% for plane_x in -2..2 %}
                            <div class="zone-subplane{% if plane_x == 0 and plane_y == 0 %} center{% endif %}">
                                {% if map.map_x0 <= map.pos_x + plane_x and map.map_x1 >= map.pos_x + plane_x and map.map_y0 <= map.pos_y + plane_y and map.map_y1 >= map.pos_y + plane_y %}

                                    {# @var current_surrounding \App\Entity\Zone #}
                                    {% set current_surrounding = map.zones[map.pos_x + plane_x][map.pos_y + plane_y] %}

                                    {% if current_surrounding.discoveryStatus != constant('App\\Entity\\Zone::DiscoveryStateNone') and current_surrounding.prototype %}
                                        {% set ruin_icon = "" %}
                                        {% if current_surrounding.buryCount > 0 %}
                                            {% set ruin_icon = "burried" %}
                                        {% else %}
                                            {% set ruin_icon = current_surrounding.prototype.icon %}
                                        {% endif %}
                                        <div class="ruin" style="background-image: url({{ asset('build/images/ruin/' ~ ruin_icon ~ '.gif') }})"></div>
                                    {% elseif (map.pos_x + plane_x) == 0 and (map.pos_y + plane_y) == 0 %}
                                        <div class="ruin" style="background-image: url({{ asset('build/images/ruin/town.gif') }})"></div>
                                    {% endif %}

                                    {% if plane_x == 0 and plane_y == 0 %}
                                        {% if zone_players > 0 %}
                                            {% for n in 1..zone_players %}
                                                <div class="actor citizen" style="left: {{ random(35,75) }}%; top: {{ random(35,75) }}%"></div>
                                            {% endfor %}
                                        {% endif %}
                                        {% if zone_zombies > 0 %}
                                            {% for n in 1..zone_zombies %}
                                                <div class="actor zombie" style="left: {{ random([random(15,95)]) }}%; top: {{ random([random(15,95)]) }}%"></div>
                                            {% endfor %}
                                        {% endif %}
                                    {% endif %}

                                    {% if current_surrounding.discoveryStatus != constant('App\\Entity\\Zone::DiscoveryStateNone') and current_surrounding.prototype %}
                                        <div class="hovertext"><span>{{ current_surrounding.buryCount > 0 ? 'Verschüttete Ruine'|trans({},'game') : current_surrounding.prototype.label|trans({},'game') }}</span></div>
                                    {% elseif (map.pos_x + plane_x) == 0 and (map.pos_y + plane_y) == 0 %}
                                        <div class="hovertext"><span>{{ current_surrounding.town.name }}</span></div>
                                    {% endif %}
                                {% endif %}
                            </div>
                        {% endfor %}
                    {% endfor %}
                </div>
                <div class="zone-sub-container censor-master">
                    {% for plane_y in 2..-2 %}
                        {% for plane_x in -2..2 %}
                            <div class="zone-subplane{% if plane_x == 0 and plane_y == 0 %} center{% endif %}" x-preview-for="{{ map.pos_x + plane_x }},{{ map.pos_y + plane_y }}">
                                {% if map.map_x0 <= map.pos_x + plane_x and map.map_x1 >= map.pos_x + plane_x and map.map_y0 <= map.pos_y + plane_y and map.map_y1 >= map.pos_y + plane_y %}
                                    {# @var current_surrounding \App\Entity\Zone #}
                                    {% set current_surrounding = map.zones[map.pos_x + plane_x][map.pos_y + plane_y] %}

                                    {% if current_surrounding.discoveryStatus == constant('App\\Entity\\Zone::DiscoveryStateNone') %}
                                        <div class="censor"></div>
                                    {% endif %}
                                {% else %}
                                    <div class="censor"></div>
                                {% endif %}
                            </div>
                        {% endfor %}
                    {% endfor %}
                </div>
            </div>

            <div class="zone-plane-controls {% if not app.user.disableFx %}retro{% endif %} {% if blocked %}blocked{% endif %}">
                <div class="marker-direction"></div>
                {% if move %}
                    {% if citizen.escortSettings is null or citizen.escortSettings.leader is null %}
                        {% if zone.x < map.map_x1 %}<div x-direction-x="1"  x-direction-y="0"  x-target-x="{{ zone.x + 1 }}" x-target-y="{{ zone.y }}" class="action-move action-move-east"></div>{% endif %}
                        {% if zone.x > map.map_x0 %}<div x-direction-x="-1" x-direction-y="0"  x-target-x="{{ zone.x - 1 }}" x-target-y="{{ zone.y }}" class="action-move action-move-west"></div>{% endif %}
                        {% if zone.y > map.map_y0 %}<div x-direction-x="0"  x-direction-y="-1" x-target-x="{{ zone.x }}" x-target-y="{{ zone.y - 1 }}" class="action-move action-move-south"></div>{% endif %}
                        {% if zone.y < map.map_y1 %}<div x-direction-x="0"  x-direction-y="1"  x-target-x="{{ zone.x }}" x-target-y="{{ zone.y + 1 }}" class="action-move action-move-north"></div>{% endif %}
                    {% endif %}
                    {% if scout_sense  %}
                        {% if zone.x < map.map_x1 %}<div class="scout-sense scout-sense-east">
                            {% set sense = map.zones[zone.x+1][zone.y].getPersonalScoutEstimation(citizen) %}
                            <svg viewBox="0 0 14 39" xmlns="http://www.w3.org/2000/svg">
                                <text x="7" y="24.5" text-anchor="middle" style="font: 12px 'visitor2', sans-serif; fill: #a0be40;">{{ sense }}</text>
                            </svg>
                            </div>{% endif %}
                        {% if zone.x > map.map_x0 %}<div class="scout-sense scout-sense-west">
                            {% set sense = map.zones[zone.x-1][zone.y].getPersonalScoutEstimation(citizen) %}
                            <svg viewBox="0 0 14 39" xmlns="http://www.w3.org/2000/svg">
                                <text x="7" y="24.5" text-anchor="middle"  style="font: 12px 'visitor2', sans-serif; fill: #a0be40;">{{ sense }}</text>
                            </svg>
                            </div>{% endif %}
                        {% if zone.y > map.map_y0 %}<div class="scout-sense scout-sense-south">
                            {% set sense = map.zones[zone.x][zone.y-1].getPersonalScoutEstimation(citizen) %}
                            <svg viewBox="0 0 39 14" xmlns="http://www.w3.org/2000/svg">
                                <text x="19.5" y="12" text-anchor="middle"  style="font: 12px 'visitor2', sans-serif; fill: #a0be40;">{{ sense }}</text>
                            </svg>
                            </div>{% endif %}
                        {% if zone.y < map.map_y1 %}<div class="scout-sense scout-sense-north">
                            {% set sense = map.zones[zone.x][zone.y+1].getPersonalScoutEstimation(citizen) %}
                            <svg viewBox="0 0 39 14" xmlns="http://www.w3.org/2000/svg">
                                <text x="19.5" y="12" text-anchor="middle"  style="font: 12px 'visitor2', sans-serif; fill: #a0be40;">{{ sense }}</text>
                            </svg>
                            </div>{% endif %}
                    {% endif %}
                    {% if scavenger_sense %}
                        {% if zone.x < map.map_x1 and (zone.x != -1 or zone.y != 0) and map.zones[zone.x+1][zone.y].discoveryStatus > constant('App\\Entity\\Zone::DiscoveryStateNone') %}
                            <div class="scavenger-sense scavenger-sense-east scavenger-sense-{% if map.zones[zone.x+1][zone.y].digs > 0 or (map.zones[zone.x+1][zone.y].prototype and map.zones[zone.x+1][zone.y].ruinDigs > 0) %}1{% else %}0{% endif %}"></div>
                        {% endif %}
                        {% if zone.x > map.map_x0 and (zone.x != 1 or zone.y != 0) and map.zones[zone.x-1][zone.y].discoveryStatus > constant('App\\Entity\\Zone::DiscoveryStateNone') %}
                            <div class="scavenger-sense scavenger-sense-west scavenger-sense-{% if map.zones[zone.x-1][zone.y].digs > 0 or (map.zones[zone.x-1][zone.y].prototype and map.zones[zone.x-1][zone.y].ruinDigs > 0) %}1{% else %}0{% endif %}"></div>
                        {% endif %}
                        {% if zone.y > map.map_y0 and (zone.x != 0 or zone.y != 1) and map.zones[zone.x][zone.y-1].discoveryStatus > constant('App\\Entity\\Zone::DiscoveryStateNone') %}
                            <div class="scavenger-sense scavenger-sense-south scavenger-sense-{% if map.zones[zone.x][zone.y-1].digs > 0 or (map.zones[zone.x][zone.y-1].prototype and map.zones[zone.x][zone.y-1].ruinDigs > 0) %}1{% else %}0{% endif %}"></div>
                        {% endif %}
                        {% if zone.y < map.map_y1 and (zone.x != 0 or zone.y != -1) and map.zones[zone.x][zone.y+1].discoveryStatus > constant('App\\Entity\\Zone::DiscoveryStateNone') %}
                            <div class="scavenger-sense scavenger-sense-north scavenger-sense-{% if map.zones[zone.x][zone.y+1].digs > 0 or (map.zones[zone.x][zone.y+1].prototype and map.zones[zone.x][zone.y+1].ruinDigs > 0) %}1{% else %}0{% endif %}"></div>
                        {% endif %}
                    {% endif %}
                {% endif %}
                    <div class='current-location'>{{'Position:'|trans({}, 'game')}} {{ zone.x }} / {{ zone.y }}</div>
            </div>
        {% endif %}
        {# <div class="retro-effect"></div>
        <div class="retro-effect"></div>
        <div class="retro-effect"></div>
        <div class="retro-effect"></div>
        <div class="retro-effect"></div> #}
    </div>
    <div class="controls">
        <div class="tilemap_controls">
            <div class="row">
                <div class="float-left">
                    {% if allow_zone_view %}
                        <button x-control="zone" class="small inline map_button map_button_left"><div>{% trans from 'game' %}Schließen{% endtrans %}</div></button>
                    {% endif %}
                    <button x-control="tags" class="small inline hide-tags map_button map_button_left"><div>{% trans from 'game' %}Mark.{% endtrans %}</div></button>
                    {% if not in_town %}<button x-control="global" class="small inline hide-tags map_button map_button_left"><div>{% trans from 'game' %}Global{% endtrans %}</div></button>{% endif %}
                </div>
                <div class="float-right">
                    <button x-control="plus"   class="small inline map_button map_button_icon map_button_right"><i class="fa fa-plus"></i></button>
                    <button x-control="center" {% if default_zoom == 0 %}disabled{% endif %} class="small inline map_button map_button_icon map_button_right"><i class="fa fa-map-marker-alt"></i></button>
                    <button x-control="minus"  {% if default_zoom == 0 %}disabled{% endif %} class="small inline map_button map_button_icon map_button_right"><i class="fa fa-minus"></i></button>
                    {% if map.routes|length > 0 %}
                        <button x-control="routes" class="small inline map_button map_button_right"><div>{% trans from 'game' %}Routen{% endtrans %}</div></button>
                    {% endif %}
                </div>
            </div>
        </div>
        {% if allow_zone_view %}
            <div class="zonemap_controls">
                <button x-control="map" class="small inline map-icon map_button map_button_left"><div>{% trans from 'game' %}Karte{% endtrans %}</div></button>
            </div>
        {% endif %}
    </div>
</div>

<script>
    {% if allow_zone_view %}
        (function() {
            const words = [
            '{{ 'Psychose'|trans({}, 'names')|e('js') }}',
            '{{ 'Demenz'|trans({}, 'names')|e('js') }}',
            '{{ 'Leid'|trans({}, 'names')|e('js') }}',
            '{{ 'Trinke'|trans({}, 'names')|e('js') }}',
            '{{ 'Schlaf'|trans({}, 'names')|e('js') }}',
            '{{ 'Blut'|trans({}, 'names')|e('js') }}',
            '{{ 'Wut'|trans({}, 'names')|e('js') }}',
            '{{ 'Hass'|trans({}, 'names')|e('js') }}',
            '{{ 'Töte'|trans({}, 'names')|e('js') }}',
            '{{ 'Töte sie'|trans({}, 'names')|e('js') }}',
            '{{ 'Mord'|trans({}, 'names')|e('js') }}',
            '{{ 'Drogen'|trans({}, 'names')|e('js') }}',
            '{{ 'Der Tod wartet'|trans({}, 'names')|e('js') }}',
            '{{ 'Du wirst sterben'|trans({}, 'names')|e('js') }}',
            '{{ 'Du wirst heute sterben'|trans({}, 'names')|e('js') }}',
            '{{ 'Folge den Schatten'|trans({}, 'names')|e('js') }}',
            '{{ 'Alpträume'|trans({}, 'names')|e('js') }}',
            '{{ 'Verstümmelung'|trans({}, 'names')|e('js') }}',
            '{{ 'Keine Hoffnung'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie beobachten dich'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie wollen dich töten'|trans({}, 'names')|e('js') }}',
            '{{ 'Traue niemandem'|trans({}, 'names')|e('js') }}',
            '{{ 'Lauf lauf weg'|trans({}, 'names')|e('js') }}',
            '{{ 'Hör nicht auf sie'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie werden dich töten'|trans({}, 'names')|e('js') }}',
            '{{ 'Dein Nachbar will deinen Tod'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie wollen dich hängen'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie werden dich umbringen'|trans({}, 'names')|e('js') }}',
            '{{ 'Bleib hier'|trans({}, 'names')|e('js') }}',
            '{{ 'Koste ihr Blut'|trans({}, 'names')|e('js') }}',
            '{{ 'Wir beobachten dich'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie sind VERRÜCKT'|trans({}, 'names')|e('js') }}',
            '{{ 'Wir wollen deine Haut'|trans({}, 'names')|e('js') }}',
            '{{ 'Koste ihr Fleisch'|trans({}, 'names')|e('js') }}',
            '{{ 'Iss ihn'|trans({}, 'names')|e('js') }}',
            '{{ 'Töte ihn'|trans({}, 'names')|e('js') }}',
            '{{ 'Lass ihn zahlen'|trans({}, 'names')|e('js') }}',
            '{{ 'Räche dich'|trans({}, 'names')|e('js') }}',
            '{{ 'Verrate sie'|trans({}, 'names')|e('js') }}',
            '{{ 'Ohne Gnade'|trans({}, 'names')|e('js') }}',
            '{{ 'Ich bin nicht verrückt'|trans({}, 'names')|e('js') }}',
            '{{ 'Ich sehe nichts'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie sind wahnsinnig'|trans({}, 'names')|e('js') }}',
            '{{ 'Bis zum Tod'|trans({}, 'names')|e('js') }}',
            '{{ 'Töte sie alle'|trans({}, 'names')|e('js') }}',
            '{{ 'Sie werden sterben'|trans({}, 'names')|e('js') }}',
            '{{ 'Lass sie sterben'|trans({}, 'names')|e('js') }}',
            '{{ 'Verschlinge sie'|trans({}, 'names')|e('js') }}',
            '{{ 'Gib auf'|trans({}, 'names')|e('js') }}',
            '{{ 'Alles... ist ... OK …'|trans({}, 'names')|e('js') }}'
        ];

            const fun_trigger_horror = function(elem) {
                if (elem.isConnected && !elem.hasAttribute('x-horror-trigger')) {
                    elem.setAttribute('x-horror-trigger', setTimeout(function() {
                        const word = words[Math.floor(Math.random() * words.length)];
                        elem.setAttribute('x-original-content', elem.innerHTML);

                        elem.innerHTML = word;
                        setTimeout(function() {
                            elem.innerHTML = elem.getAttribute('x-original-content');
                            elem.removeAttribute('x-original-content');
                            elem.removeAttribute('x-horror-trigger');
                            fun_trigger_horror(elem);
                        }, 500 * (Math.random()+1.0));
                    }, 1000 + (30000 * Math.random())));
                }
            };

            const fun_untrigger_horror = function(elem) {
                if (elem.hasAttribute('x-horror-trigger')) {
                    clearTimeout( elem.getAttribute('x-horror-trigger') )
                    elem.removeAttribute('x-original-content');
                    elem.removeAttribute('x-horror-trigger');
                }
            }

            $.html.addEventListenerAll('.tooltip-map', 'appear', function(e,elem) { fun_trigger_horror(elem); });
            $.html.addEventListenerAll('.tooltip-map', 'disappear', function(e,elem) { fun_untrigger_horror(elem); });
            $.html.forEach('.zone-subplane > .hovertext > span', fun_trigger_horror );
        })();
    {% endif %}
</script>
