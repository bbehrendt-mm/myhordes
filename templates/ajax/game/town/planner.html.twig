{% extends "ajax/game/town/town.html.twig" %}
{% block title %}{{'Expeditionen'|trans({}, 'game')}}{% endblock %}
{% block content %}
    {% set hour = "now"|date("G") %}
    <div class="row">
        <div class="cell rw-12 town-banner town-banner-door-{% if town.door %}open{% else %}closed{% endif%} time-{{ hour }} {% if conf.isNightTime %}night{% endif %}"></div>
    </div>

    {% embed "ajax/game/town/door_tabs.html.twig" with {'door_section': door_section, 'has_battlement': has_battlement} %}
    {% endembed %}

    <div class="row">
        <div class="padded cell rw-12">
            {{ encore_entry_script_tags('module-map') }}
            <hordes-map id="planner-map" data-react-mount="map" data-map="{{ map_public_json }}"></hordes-map>
        </div>
    </div>

    <div class="row">
        <div class="padded cell rw-6 rw-md-12">
            <div id="create_route_control" data-await-custom-element="hordes-map">
                <button id="create_route_1">{{ 'Neue einfache Route'|trans({},'game') }}</button>
                <button {% if not allow_extended %}disabled{% endif %} id="create_route_2">{{ 'Neue komplexe Route'|trans({},'game') }}</button>
                <button x-ajax-href="{{ path('town_routes') }}">{{ 'Schließen'|trans({},'global') }}</button>
            </div>
            <div id="route_dashboard" style="display: none">
                <div class="row-flex v-center">
                    <div class="padded cell grow-1 shrink-0"><label><input id="route_name" type="text" maxlength="32" placeholder="{{ 'Name der Route'|trans({},'game') }}" /></label></div>
                    <div class="padded cell grow-0 shrink-0 hidden" data-route-ap-container><div class="ap">0</div></div>
                </div>
                <div class="row">
                    <div class="padded cell rw-6"><a id="route_undo" class="small" href="#"><i class="fa fa-undo"></i> {{ 'Rückgängig'|trans({},'global') }}</a></div>
                </div>
                <div class="row">
                    <div class="padded cell rw-6"><a id="cancel_route" class="small" href="#">{{ 'Abbrechen'|trans({},'global') }}</a></div>
                    <div class="padded cell rw-6"><button disabled id="save_button">{{ 'Speichern'|trans({},'global') }}</button></div>
                </div>
            </div>
        </div>
        <div class="padded cell rw-6 rw-md-12">
            <div class="help">
                <p>{% trans from 'game' %}
                    Hier kannst du Routen für einen Trip in die Außenwelt planen. Einfache Routen beginnen und enden immer
                    in der Stadt. Komplexe Routen können an beliebigen Punkten beginnen und enden.
                {% endtrans %}</p>
                <p>{% trans from 'game' %}
                    Nur Helden können komplexe Routen planen.
                {% endtrans %}</p>
            </div>
        </div>
    </div>
{% endblock %}
{% block js %}
    {{ parent() }}
    <script>
        const begin_route = function(complex) {
            {% if not allow_extended %}
                complex = false;
            {% endif %}
            document.getElementById('create_route_control').style.display = 'none';
            document.getElementById('route_dashboard').style.display = 'block';

            $.components.dispatchEvent('planner-map', 'planning-begin', {complex});
        }

        let edit_nodes = null;
        $.components.attachEventListener('planner-map', 'planner-step', e => {
            const route_ap_container = document.querySelector('[data-route-ap-container]');
            const [,,ap] = (edit_nodes = e.route).reduce( ([x0,y0,d], [x1,y1]) =>
                d === null ? [x1,y1,0] : [ x1,y1,  Math.abs( x0-x1 ) + Math.abs( y0-y1 ) + d ], [null,null,null]
            )
            route_ap_container.classList.toggle('hidden', !ap );
            route_ap_container.firstElementChild.innerText = ap;
            if (e.valid) document.getElementById('save_button').removeAttribute('disabled');
            else document.getElementById('save_button').setAttribute('disabled','disabled');
        });

        document.getElementById('route_undo').addEventListener('click', e => {
            e.preventDefault();
            $.components.dispatchEvent('planner-map', 'planning-undo', {});
        });

        document.getElementById('cancel_route').addEventListener('click', e => {
            e.preventDefault();
            document.getElementById('create_route_control').style.display = 'block';
            document.getElementById('route_dashboard').style.display = 'none';
            $.components.dispatchEvent('planner-map', 'planning-end', {});
        });

        document.getElementById('save_button').addEventListener('click', function(e) {
            const name = document.getElementById('route_name').value;
            if (name.length > 32 || name.length < 3) {
                $.html.error('{{ 'Bitte gib einen gültigen Namen ein (zwischen 3 und 32 Zeichen).'|trans({},'game') }}');
                return;
            }
            $.ajax.easySend( '{{ path('town_planner_route_submit_controller') }}', {data: edit_nodes, name: name},
                function () {
                    $.components.dispatchEvent('planner-map', 'planning-end', {})
                    $.ajax.load(null, '{{ path('town_planner') }}', false, {}, () => $.components.dispatchEvent('planner-map', 'planning-end', {}));
                } );
        });

        document.getElementById('create_route_1').addEventListener('click', function() { begin_route(false); })
        document.getElementById('create_route_2').addEventListener('click', function() { begin_route(true); })
    </script>
{% endblock %}