{% extends "ajax/game/town/town.html.twig" %}
{% block title %}{{'Bauprojekte der Stadt'|trans({}, 'game')}}{% endblock %}
{% block content %}
    {% set hour = "now"|date("G") %}
    <div class="row">
        <div class="cell rw-12 town-banner town-banner-construction time-{{ hour }} {% if conf.isNightTime %}night{% endif %}"></div>
    </div>

    <div class="help">
        {% trans from 'game' %}
            In diesem Bereich kannst du an der <strong>Errichtung neuer Gebäude und Bauprojekte mitarbeiten</strong>. Dazu musst du zunächst die dafür notwendigen Materialien in der Wüste einsammeln (Holz, Metall,...). Anschließend kannst du deine Aktionspunkte (AP) für das Gebäude ausgeben, das dich am meisten interessiert.
        {% endtrans %}
        <br />
        <p>{{ help_lnk('Neue Gebäude bauen'|trans({},'help'), 'help', {'name': 'constructing_new_buildings'}) }}</p>
    </div>

    {% if banished %}
        {% if slavery %}
            <div class="note">
                {% trans from 'game' %}
                    Die Stadt hat Sklaverei legalisiert. Ab sofort kannst du trotz deiner Verbannung auf einer Baustelle
                    arbeiten und erhälst sogar einen Bonus von 50% auf alle investierten <div class="ap"></div>.
                {% endtrans %}
            </div>
        {% else %}
            <div class="note note-warning">
                {% trans from 'game' %}
                    Du wurdest verbannt und kannst daher nicht länger auf einer Baustelle arbeiten.
                {% endtrans %}
            </div>
        {% endif %}
    {% endif %}

    <h5>{{ 'Diskussionen rund um Bauprojekte'|trans({},'game') }}</h5>
    <div class="forum-preview-wrapper forum-preview-wrapper-construction">
        <div class="forum-preview-container">
            <div id="forum-content">
                <div class="center"><i class="fa fa-spin fa-circle-notch"></i> {{ 'Lade Forum...'|trans({},'game') }}</div>
            </div>
        </div>
    </div>


    <h5>{{ 'Vorhandene Bauprojekte'|trans({},'game') }}</h5>
    {% if canvote %}
        <div class="hero-help">{{'Du kannst den Bürgern der Stadt die Errichtung eines bestimmten Gebäudes empfehlen. Bewege dafür den Mauszeiger über das Bauprojekt, das du empfehlen willst und klicke auf den Link <strong>Abstimmen</strong>, der darüber erscheint.'|trans({}, 'game')|raw}}</div>
    {% endif %}

    {% if not voted_building is null %}
        <div class="voted-building">
            {{'Das folgende Bauprojekt wurde empfohlen:'|trans({}, 'game')}}<br />
            <strong class="name">{{voted_building.prototype.label|trans({}, 'buildings')}}</strong>
            <div class="tooltip help">
            {{ 'Diese Empfehlung stammt von einem oder mehreren Helden deiner Stadt.'|trans({}, 'game') }}
            </div>
        </div>
    {% endif %}

    {% macro building_entry(building, buildable, n, dict, items, disable_all, workshopBonus, hpToAp, canvote, votedBuilding) %}
        {# @var building \App\Entity\Building #}
        <div class="building {% if not buildable %}locked{% elseif building.complete %}complete{% endif %} {% if building == votedBuilding %}voted{% endif %} {% if n > 0 %}lv-{{ min(n,6) }}{% else %}root{% endif %}">
            <div class="type_indicator"></div>
            <div class="building_row">
                <div class="building_info cell">
                    {% for i in range(0, n) %}
                        {% if i != 0 %}
                            <img alt="" class="level_indicator" src="{{ asset('build/images/building/small_parent.gif' ) }}">
                        {% endif %}
                    {% endfor %}
                    {% if building.prototype.description is not empty %}
                        <div class="tooltip help">
                            {% if building.complete and building.defense != building.prototype.defense %}
                                <b>{{"Beschädigte Verteidigung: {defense} / {max}"|trans({"{defense}": building.defense, "{max}": building.prototype.defense}, 'game')}}</b>
                                <hr />
                            {% endif %}
                            {{ building.prototype.description|trans({}, 'buildings') }}
                        </div>
                    {% endif %}
                    {% if buildable %}
                        <img alt="" class="building_icon" src="{{ asset('build/images/building/' ~ building.prototype.icon ~ '.gif' ) }}" >
                    {% else %}
                        <img alt="" class="building_icon" src="{{ asset('build/images/icons/lock.gif' ) }}" >
                    {% endif %}
                    <span class="building_name {% if canvote and not building.complete %}vote_hide{% endif %}">{{ building.prototype.label|trans({},'buildings') }}</span>
                    {% if building.prototype.temp %}
                        <span>
                            <img alt="(!)" src="{{ asset('build/images/icons/small_warning.gif') }}" />
                            <div class="tooltip help temp-building">
                                <h1>{{ 'Temporäre Konstruktion!'|trans({}, 'buildings') }}</h1>
                                {{ 'Diese Konstruktion kann nur einmal verwendet werden. Sie wird nach dem Angriff der Zombiehorde wieder abgerissen.'|trans({}, 'buildings')|raw }}<br /><em>{{'Wenn ihr wollt, könnt irh sie morgen nochmal bauen.'|trans({}, 'buildings')}}</em>
                            </div>
                        </span>
                    {% endif %}
                    {% if canvote and not building.complete %}
                        <span class="vote" x-building-id="{{ building.id }}">[ <span class="link">{{'Abstimmen'|trans({}, 'game')}}</span> ]</span>
                    {% endif %}
                    {% if (building.complete and building.defense > 0) or (not building.complete and building.prototype.defense > 0) %}
                        <div class="defense{% if building.complete and building.defense != building.prototype.defense %}-broken{% endif %}">
                            {% if (building.complete and building.defense > 0) %}
                                {{ building.defense }}
                            {% elseif not building.complete%}
                                {{ building.prototype.defense }}
                            {% endif %}
                            {% if building.complete and building.defense != building.prototype.defense and building.prototype.description is empty %}
                                <div class="tooltip">
                                    {{"Beschädigte Verteidigung: {defense} / {max}"|trans({"{defense}": building.defense, "{max}": building.prototype.defense}, 'game')}}
                                </div>
                            {% endif %}
                        </div>
                    {% endif %}
                </div>
                {% set not_built = buildable and building.ap < ((building.prototype.ap * workshopBonus)|round) %}
                {% set needs_repair = not not_built and building.complete and building.hp < building.prototype.hp %}
                <div class="building_resources{% if needs_repair %} to_repair{% endif %} padded cell">
                    {% set res_ok = true %}
                    {# initial test: building.ap > 0 and (building.ap < ((building.prototype.ap * workshopBonus)|round) or not building.complete) #}
                    {% if building.ap > 0 and not building.complete %}
                        <div class="ap-bar">
                            <div class="bar" style="width: {{ 100*(building.ap/((building.prototype.ap * workshopBonus)|round)) }}%"></div>
                        </div>
                        <img class="ap-bar-start" src="{{ asset('build/images/building/building_barStart.gif' ) }}"/>
                    {% elseif building.complete and building.hp < building.prototype.hp %}
                        <div class="ap-bar">
                            <div class="bar" style="width: {{ 100*(building.hp/((building.prototype.hp)|round)) }}%"></div>
                            <div class="tooltip"><em>{{"Zustand:"|trans({}, 'game')}}</em> {{building.hp}}/{{building.prototype.hp}}<br />
                                {{"Jeder {divap}, der in die Reparatur investiert wird, beseitigt {hprepair} Schadenspunkte an einem Bauwerk."|trans({"{divap}": "<div class='ap'></div>", "{hprepair}": "<b>" ~ hpToAp ~ "</b>"}, "game")|raw}}<br /><br />
                                {{"Die Reparatur verbraucht keine Ressourcen."|trans({}, 'game')}}
                            </div>
                        </div>
                        <img class="ap-bar-start" src="{{ asset('build/images/building/building_barStartBroken.png' ) }}"/>
                    {% endif %}
                    
                    {% if not_built %}
                        <div class="build-req">
                            <div class="ap-cost">
                                <div class="ap">{{ ((building.prototype.ap * workshopBonus)|round) - building.ap }}</div>
                                <div class="tooltip help">
                                    {{ 'Zum Bau dieses Bauprojekts fehlen noch {ap} AP'|trans({'{ap}':((building.prototype.ap * workshopBonus)|round) - building.ap },"game") }}
                                </div>
                            </div>
                        </div>
                    {% elseif needs_repair %}
                        <div class="build-req">
                            <div class="ap">{{ ((building.prototype.hp - building.hp)/hpToAp)|round(0, 'ceil') }}</div>
                        </div>
                    {% endif %}
                    {% if not building.complete and building.prototype.resources is not null and buildable %}
                        {% for itemgroup in building.prototype.resources.entries %}
                            {% if items[ itemgroup.prototype.id ] < itemgroup.chance %}
                                {% set res_ok = false %}
                            {% endif %}
                                <div class="build-req build-req-detail">
                                    <img alt="" src="{{ asset('build/images/item/item_' ~ itemgroup.prototype.icon ~ '.gif' ) }}" />
                                    <span class="resource current {% if items[ itemgroup.prototype.id ] < itemgroup.chance %}low{% endif %}">{{ items[ itemgroup.prototype.id ] }}/</span><span class="resource needed">{{ itemgroup.chance }}</span>
                                    <div class="tooltip">
                                        {{ itemgroup.prototype.label|trans({}, 'items') }}
                                    </div>
                                </div>
                                {% if items[ itemgroup.prototype.id ] < itemgroup.chance %}
                                    <div class="build-req build-req-short hidden">
                                        <img alt="" src="{{ asset('build/images/item/item_' ~ itemgroup.prototype.icon ~ '.gif' ) }}" />
                                        <span class="resource needed">{{ itemgroup.chance - items[ itemgroup.prototype.id ] }}</span>
                                        <div class="tooltip">
                                            {{ itemgroup.prototype.label|trans({}, 'items') }}
                                        </div>
                                    </div>
                                {% endif %}
                        {% endfor %}
                    {% endif %}
                    <div class="building_action cell">
                        {% if buildable and (building.ap < ((building.prototype.ap * workshopBonus)|round) or not building.complete) or (building.complete and building.hp < building.prototype.hp) %}
                            <button class="inline build-btn" {% if (not res_ok) or (disable_all and not building.complete) %}disabled{% else %}x-building-id="{{ building.id }}"{% endif %}>
                                {% if not building.complete %}
                                    <img alt="+" src="{{ asset('build/images/icons/small_more2.gif') }}" />
                                {% else %}
                                    <img src="{{ asset('build/images/icons/small_refine.gif') }}" alt="" style="margin-right: 0px;" />
                                    <div class="tooltip help">{{ 'Für die vollständige Instandsetzung dieses Gebäudes sind noch {remaining} AP erforderlich.'|trans({remaining: ((building.prototype.hp - building.hp)/hpToAp)|round(0, 'ceil')}, 'game') }}</div>
                                {% endif %}
                            </button>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        {% if n < 20 and dict[building.prototype.id] is not empty %}
            {% for sub_building in dict[building.prototype.id] %}
                {{ _self.building_entry(sub_building, buildable and building.complete, n+1, dict, items, disable_all, workshopBonus, hpToAp, canvote, votedBuilding) }}
            {% endfor %}
        {% endif %}
    {% endmacro %}

    {# @var root_cats \App\Entity\Building[] #}
    <div>
        <ul class="buildings-tabs tabs plain" x-tab-group="buildings" x-tab-control>
            <li class="tab" x-tab-id="all">
                <div class="tab-link">
                    <img class="hide-desktop" alt="*" src="{{ asset( 'build/images/icons/small_new.gif' ) }}" >
                    <span class="hide-lg hide-md hide-sm">{{ 'Alle'|trans({},'game') }}</span>
                </div>
            </li>
            {% for building in root_cats %}
                <li class="tab" x-tab-id="type_{{ building.prototype.icon }}">
                    <div class="tab-link">
                        <img class="hide-desktop" alt="" src="{{ asset('build/images/building/' ~ building.prototype.icon ~ '.gif' ) }}" >
                        {% set label = building.prototype.label|trans({}, 'buildings') %}
                        <span class="hide-lg hide-md hide-sm">{{ label|length > 12 ? (label|slice(0,10) ~ '...') : label }}</span>
                    </div>
                </li>
            {% endfor %}
        </ul>
    </div>

    <div class="clear">
        {% for building in root_cats %}
            <div
                x-tab-group="buildings"
                x-tab-id="type_{{ building.prototype.icon }}"
                x-tab-target
                class="buildings type_{{ building.prototype.icon }}"
            >
                <div class="row-flex wrap stretch buildings_header">
                    <div class="type_indicator"></div>
                    <div class="stretch buildings_header_image"></div>
                </div>
                {{ _self.building_entry(building, true, 0, dictionary, bank, banished and not slavery, workshopBonus, hpToAp, canvote, voted_building) }}
            </div>
        {% endfor %}
    </div>

    <div class="row">
        <div class="small cell rw-12 right build-req-detail"><a href="#" id="toggle_constmode_short">{{ 'Materialienverbrauch ansehen'|trans({},'game') }}</a></div>
        <div class="small cell rw-12 right build-req-short hidden"><a href="#" id="toggle_constmode_detail">{{ 'Normale Ansicht'|trans({},'game') }}</a></div>
    </div>
    <br />

    <div class="help">
    {{ 'Bauprojekte, die mit dem Symbol "<img alt="(!)" src="{path}" />" gekennzeichnet sind, können nur einmal verwendet werden. Sie werden nach dem Angriff der Zombiehorde wieder abgerissen. Wenn ihr wollt, könnt ihr sie morgen nochmal bauen.'|trans({"{path}": asset('build/images/icons/small_warning.gif')},'game')|raw }}  
    </div>

    <div class="row">
        <h5>{{ 'Baustellenregister'|trans({},'game') }} <a class="float-right link" x-ajax-href="{{ path("game_newspaper") }}">{{ 'Das Gesamtregister ansehen'|trans({}, 'game') }}<div class="tooltip normal">{{ 'Dieser Link bringt dich zum <strong>Großen Register</strong>. Darin werden alle wichtigen Handlungen und Aktionen der Stadtbürger gespeichert...'|trans({}, 'game')|raw }}</div></a></h5>
        <div class="cell rw-12">
            <hordes-log id="construction-log" data-react-mount="construction-log" data-day="{{ day }}" data-etag="{{ date().timestamp }}" data-category="{{ constant('App\\Entity\\LogEntryTemplate::TypeConstruction') }}" data-domain="town"></hordes-log>
        </div>
    </div>
{% endblock %}
{% block js %}
    {{ parent() }}
    <script>
        const send_build_request = function() {
            let ap = null, valid = false;
            ap = document.getElementById("ap_amount").value;
            ap = parseInt(ap);
            if (!ap || isNaN(ap)) return;

            valid = ap >= 0 && ap <= {{ app.user.activeCitizen.ap + app.user.activeCitizen.bp }};
            if (!valid) {
                $.html.error('{{ '<strong>Du brauchst für diese Aktion {ap} Aktionspunkt(e)</strong>. <hr />Trink oder iss etwas, oder nimm eine Droge, ansonsten muss du bis <strong>morgen</strong> warten.'|trans({},'game')|e('js') }}'.replace('{ap}', '' + ap))
                return;
            }

            $.ajax.easySend( '{{ path('town_constructions_build_controller') }}', {id: document.getElementById("prompt_id").value, ap: ap},
                function () {
                    $.ajax.load(null, '{{ path('town_constructions') }}', true, {});
                } );
        };

        let buttons = document.querySelectorAll('.build-btn[x-building-id]');
        for (let i = 0; i < buttons.length; i++)
            buttons[i].addEventListener('click', function() {
                let prompt = document.getElementById("ap_prompt");
                if (prompt === null) {
                    prompt = document.createElement("div");
                    prompt.id = "ap_prompt";
                    prompt.setAttribute('x-ajax-volatile', 'any');

                    let input = document.createElement("input");
                    input.setAttribute("type", "number");
                    input.id = "ap_amount";
                    input.style.marginBottom = "3px";
                    input.value = "1";
                    input.setAttribute('min', 1);
                    input.setAttribute('max', {{ app.user.activeCitizen.ap + app.user.activeCitizen.bp }});
                    input.addEventListener("keyup", function(event) { if(event.key === "Enter") send_build_request()});

                    prompt.append(input);

                    let input_id = document.createElement("input");
                    input_id.setAttribute("type", "hidden");
                    input_id.id = "prompt_id";
                    input_id.value = this.getAttribute('x-building-id');

                    prompt.append(input_id);

                    let button = document.createElement("button");
                    button.classList.add("button", "center");
                    button.innerText = "{{ 'Teilnehmen'|trans({}, 'game') }}";
                    button.addEventListener("click", function() { send_build_request();});
                    prompt.append(button);

                    let cancelLink = document.createElement("div");
                    cancelLink.innerText = "{{ 'Abbrechen'|trans({}, 'global') }}"
                    cancelLink.classList.add("small", "link", "right");
                    cancelLink.addEventListener("click", function() {prompt.style.display = "";});
                    prompt.append(cancelLink);

                    document.body.append(prompt);
                }
                document.getElementById("prompt_id").value = this.getAttribute('x-building-id');
                document.getElementById("ap_amount").value = "1";
                document.getElementById("ap_amount").setAttribute('max', {{ app.user.activeCitizen.ap + app.user.activeCitizen.bp }});
                prompt.style.display = "block";
                prompt.style.top = (this.getBoundingClientRect().top + document.documentElement.scrollTop) + "px";
                prompt.style.left = this.getBoundingClientRect().left - prompt.clientWidth + this.clientWidth + "px";
                document.getElementById("ap_amount").focus();
                document.getElementById("ap_amount").select();
            });

        const send_vote_request = function(id){
            if (!confirm('{{ 'Bestätigen?'|trans({},'global')|e('js') }}'))
                return;

            $.ajax.easySend( '{{ path('town_constructions_vote_controller') }}', {id: id},
                function () {
                    $.ajax.load(null, '{{ path('town_constructions') }}', true);
            } );
        }

        let voteButtons = document.querySelectorAll('.vote[x-building-id]');
        for(let i = 0 ; i < voteButtons.length ; i++) {
            voteButtons[i].addEventListener('click', function(){ send_vote_request(this.getAttribute('x-building-id')); });
        }

        $.ajax.background().no_history().load( document.getElementById('forum-content'), '{{ path('forum_previewer_controller', {fid: town.forum.id, sem: constant('App\\Entity\\Thread::SEMANTIC_CONSTRUCTIONS') })|e('js') }}', false, {}, function() {
            let container = document.querySelector('.forum-posts');
            container.scrollTop = container.scrollHeight;
        } );

        const update_view_mode = () => {
            const short = $.client.config.showShortConstrList.get();
            $.html.forEach('.build-req-detail', elem => elem.classList.toggle( 'hidden', short ));
            $.html.forEach('.build-req-short',  elem => elem.classList.toggle( 'hidden', !short ));
        }

        update_view_mode();

        $.html.addEventListenerAll('#toggle_constmode_short', 'click', e => {
            e.preventDefault();
            $.client.config.showShortConstrList.set(true);
            update_view_mode();
        });

        $.html.addEventListenerAll('#toggle_constmode_detail', 'click', e => {
            e.preventDefault();
            $.client.config.showShortConstrList.set(false);
            update_view_mode();
        });
    </script>
{% endblock %}