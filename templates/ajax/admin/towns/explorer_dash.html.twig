{% extends 'ajax/admin/towns/explorer_shell.html.twig' %}

{% from "ajax/admin/widget/controls.twig" import widget_item_creator as item_creator, widget_item_creator_js as item_creator_js %}

{% block explorer_content %}
	{% macro valuelist(prop,val,raw = false) %}
		<div class="row">
			<div class="padded cell rw-4 note note-lightest">{{ prop }}</div>
			<div class="padded cell rw-8">
				{% if val is same as(true) %}
					{{ 'Ja'|trans({},'admin') }}
				{% elseif val is same as(false)  %}
					{{ 'Nein'|trans({},'admin') }}
				{% elseif raw %}
					{{ val|raw }}
				{% else %}
					{{ val }}
				{% endif %}
			</div>
		</div>
	{% endmacro %}

	<div class="row">
		<div class="cell padded rw-6 rw-sm-12">
			{{ _self.valuelist('ID'|trans({},'admin'),         town.id) }}
			{{ _self.valuelist('Stadtname'|trans({},'admin'),  town.name ~ (town.nameSchema ? ('<br/><span class="small">' ~ town.nameSchema ~ '</span>') : ''), true) }}
			{{ _self.valuelist('Typ'|trans({},'admin'),        town.type.label|trans({},'game')) }}
			{{ _self.valuelist('Sprache'|trans({},'admin'),    '<img style="width: 24px" src="' ~ asset("build/images/lang/" ~ town.language ~ ".png") ~ '" alt="" />', true  ) }}
			{{ _self.valuelist('Geplant für'|trans({},'admin'),town.scheduledFor != null ? town.scheduledFor|format_datetime('short','short') : '--') }}
			{{ _self.valuelist('Ersteller'|trans({},'admin'),  town.creator != null ? town.creator.name : '--') }}
			{{ _self.valuelist('Population'|trans({},'admin'), town.population) }}
			{{ _self.valuelist('Bürger'|trans({},'admin'),     town.citizens|length) }}
			{{ _self.valuelist('Fortschritt des Aufstands'|trans({},'admin'),     town.insurrectionProgress ~ "%") }}
			{% if town.strangerEnabled %}
				{{ _self.valuelist('Fremder'|trans({},'admin'),     town.strangerPower) }}
			{% endif %}
			{{ _self.valuelist('Koalitionen'|trans({},'admin'),town.coalizedCitizenCount) }}
			{{ _self.valuelist('Saison'|trans({},'admin'),     town.season ? town.season.number : '--') }}
			{{ _self.valuelist('Profiler'|trans({},'admin'),   town.rankingEntry.profilerVersion > 0 ? ('v'~town.rankingEntry.profilerVersion) : ('Nicht installiert'|trans({},'admin'))) }}
			{{ _self.valuelist('Tag'|trans({},'admin'),        town.day) }}
			{{ _self.valuelist('Offen'|trans({},'admin'),      town.open ? (town.password ? 'Passwort-geschützt'|trans({},'admin') : true) : false ) }}
			{{ _self.valuelist('Chaos'|trans({},'admin'),      town.chaos) }}
			{{ _self.valuelist('Zerstört'|trans({},'admin'),   town.devastated) }}
			{{ _self.valuelist('Tor offen'|trans({},'admin'),  town.door) }}
			{{ _self.valuelist('Brunnen'|trans({},'admin'),    town.well) }}
			{{ _self.valuelist('Quarantäne'|trans({},'game'),  town.attackFails >= 3) }}
			{{ _self.valuelist('Ranking-Ausschluss'|trans({},'game'),  town.rankingEntry.disabled) }}
			{{ _self.valuelist('Event-Stadt'|trans({},'ghost'),         town.rankingEntry.event) }}

			<div class="row">
				<div class="padded cell rw-4 note note-lightest"><label for="administer-town">{{ 'Stadt administrieren'|trans({},'admin') }}</label></div>
				<div class="padded cell rw-8">
					<select id="administer-town" style="width: 100%;">
						<option value="">-</option>
						{% if is_granted("ROLE_ADMIN") %}
							<optgroup label="{{ 'Nächtlicher Angriff'|trans({},'admin') }}">
								{% if town.attackFails >= 3 %}
									<option value="{{ url('admin_town_manage', {action: 'release', id: town.id}) }}">{{ 'Quarantäne aufheben'|trans({},'admin') }}</option>
								{% else %}
									<option value="{{ url('admin_town_manage', {action: 'quarantine', id: town.id}) }}">{{ 'Unter Quarantäne stellen'|trans({},'admin') }}</option>
								{% endif %}
								{% if not town.open %}
									<option value="{{ url('admin_town_manage', {action: 'advance', id: town.id}) }}">{{ 'Manueller Tageswechsel'|trans({},'admin') }}</option>
								{% endif %}
							</optgroup>
						{% endif %}
						<optgroup label="{{ 'Verwaltung'|trans({},'admin') }}">
							{% if is_granted("ROLE_ADMIN") %}
								<option value="{{ url('admin_town_manage', {action: 'set_name', id: town.id}) }}" x-query="{{ 'Neuen Namen eingeben.'|trans({},'admin') }}">{{ 'Stadtnamen ändern'|trans({},'admin') }}</option>
								<option value="{{ url('admin_town_manage', {action: 'dice_name', id: town.id}) }}">{{ 'Stadtnamen regenerieren'|trans({},'admin') }}</option>
								<option x-alt-url="{{ path('admin_town_list') }}" value="{{ url('admin_town_manage', {action: 'nullify', id: town.id}) }}">{{ 'Annulieren'|trans({},'admin') }}</option>
								{% if town.open %}
									{% if town.password is not null %}
										<option value="{{ url('admin_town_manage', {action: 'pw_change', id: town.id}) }}" x-query="{{ 'Neues Passwort eingeben.'|trans({},'admin') }}">{{ 'Passwort ändern'|trans({},'admin') }}</option>
										<option value="{{ url('admin_town_manage', {action: 'pw_change', id: town.id}) }}">{{ 'Passwort entfernen'|trans({},'admin') }}</option>
									{% else %}
										<option value="{{ url('admin_town_manage', {action: 'pw_change', id: town.id}) }}" x-query="{{ 'Neues Passwort eingeben.'|trans({},'admin') }}">{{ 'Passwort setzen'|trans({},'admin') }}</option>
									{% endif %}
								{% endif %}
								<option value="{{ url('admin_town_manage', {action: 'set_town_base_def', id: town.id}) }}" x-query="{{ 'Neue Basis-Stadtverteidigung:'|trans({},'admin') }}">{{ 'Basis-Stadtverteidigung setzen'|trans({},'admin') }}</option>
								<option value="{{ url('admin_town_manage', {action: 'set_town_temp_def', id: town.id}) }}" x-query="{{ 'Neue temporäre Stadtverteidigung:'|trans({},'admin') }}">{{ 'Temporäre Stadtverteidigung setzen'|trans({},'admin') }}</option>
								{% if not town.brokenDoor %}<option value="{{ url('admin_town_manage', {action: 'toggle_lockdown', id: town.id}) }}">{% if town.lockdown %}{{ 'Sperre deaktivieren'|trans({},'admin') }}{% else %}{{ 'Sperre aktivieren'|trans({},'admin') }}{% endif %}</option>{% endif %}
								{% if not town.lockdown %}<option value="{{ url('admin_town_manage', {action: 'toggle_broken_door', id: town.id}) }}">{% if town.brokenDoor %}{{ 'Stadttor reparieren'|trans({},'admin') }}{% else %}{{ 'Zerstöre das Stadttor'|trans({},'admin') }}{% endif %}</option>{% endif %}
							{% endif %}
							{% if is_granted("ROLE_CROW") %}
								{% if town.rankingEntry.event %}
									<option value="{{ url('admin_town_event_tag_control', {tid: town.rankingEntry.id, act: 0}) }}">{{ 'Event-Markierung entfernen'|trans({},'admin') }}</option>
								{% else %}
									<option value="{{ url('admin_town_event_tag_control', {tid: town.rankingEntry.id, act: 1}) }}">{{ 'Als Event-Stadt markieren'|trans({},'admin') }}</option>
								{% endif %}
								{% if town.rankingEntry.disabled %}
									<option value="{{ url('admin_town_town_ranking_control', {tid: town.rankingEntry.id, act: 0}) }}">{{ 'Ranking-Ausschluss zurücknehmen'|trans({},'admin') }}</option>
								{% else %}
									<option value="{{ url('admin_town_town_ranking_control', {tid: town.rankingEntry.id, act: 1}) }}">{{ 'Diese Stadt aus dem Ranking ausschließen'|trans({},'admin') }}</option>
								{% endif %}
							{% endif %}
						</optgroup>
						{% if is_granted("ROLE_ADMIN") %}
							{% if app.environment == 'dev' %}
								<optgroup label="Debug">
									{% set ctz_engaged = 0 %}
									{% set ctz_disengaged = 0 %}
									{% for cur_citizen in town.citizens %}
										{% if cur_citizen.alive and cur_citizen.active %}
											{% set ctz_engaged = ctz_engaged + 1 %}
										{% elseif cur_citizen.alive and not cur_citizen.active %}
											{% set ctz_disengaged = ctz_disengaged + 1 %}
										{% endif %}
									{% endfor %}
									{% if town.population > town.citizenCount %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_enable_stranger', id: town.id}) }}">{{ 'Mysteriösen Fremden aktivieren'|trans({},'admin') }}</option>
										<option value="{{ url('admin_town_manage', {action: 'dbg_fill_town', id: town.id}) }}">{{ 'Stadt füllen'|trans({},'admin') }}</option>
									{% endif %}
									<option value="{{ url('admin_town_manage', {action: 'dbg_fill_bank', id: town.id}) }}">{{ 'Bank füllen'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_empty_bank', id: town.id}) }}">{{ 'Bank leeren'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_unlock_bank', id: town.id}) }}">{{ 'Banksperre aufheben'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_hydrate', id: town.id}) }}">{{ 'Durst aufheben'|trans({},'admin') }}</option>
									{% if ctz_engaged > 0 %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_disengage', id: town.id}) }}">{{ 'Alle Spieler entkoppeln'|trans({},'admin') }}</option>
									{% endif %}
									{% if ctz_disengaged > 0 %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_engage', id: town.id}) }}">{{ 'Alle Spieler koppeln'|trans({},'admin') }}</option>
									{% endif %}
									<option value="{{ url('admin_town_manage', {action: 'dbg_set_well', id: town.id}) }}" x-query="{{ 'Neuer Füllstand:'|trans({},'admin') }}">{{ 'Brunnen-Füllstand setzen'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_unlock_buildings', id: town.id}) }}">{{ 'Alle Gebäude freischalten'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_map_progress', id: town.id}) }}" x-query="{{ 'Basierend auf Tag (frei lassen, um aktuellen Tag zu verwenden)'|trans({},'admin') }}">{{ 'Zombie-Spread ausführen'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_map_zombie_set', id: town.id}) }}" x-query="{{ 'Format: "{x0}/{y0}:{x1}/{y1},{zombies}" (Bereich) oder "{x}/{y},{zombies}" (einzelne Zone), zum Beispiel "-1/3:-4/2,5". Statt der Positionsangabe kann "all" verwendet werden. Statt einem numerischen Wert für die Zahl der Zombies ist folgendes ebenfalls gültig: "today" (Anzahl der Zombies beim letzten Tageswechsel), "initial" (Anzahl der Zombies an Tag 1).'|trans({},'admin') }}">{{ 'Zombies setzen'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_adv_days', id: town.id}) }}" x-query="{{ 'Anzahl der Tage'|trans({},'admin') }}">{{ 'Vorspulen'|trans({},'admin') }}</option>
									<option value="{{ url('admin_town_manage', {action: 'dbg_set_attack', id: town.id}) }}" x-query="{{ 'Format: {zombies} (heutiger Angriff) oder {tag}:{zombies} (Angriff an einem bestimmten Tag). Es können keine Tage in der Vergangenheit gewählt werden.'|trans({},'admin') }}">{{ 'Stärke des Angriffs setzen'|trans({},'admin') }}</option>
									{% if town.chaos and not town.devastated %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_toggle_chaos', id: town.id}) }}" x-param="0">{{ 'Chaos-Modus deaktivieren'|trans({},'admin') }}</option>
									{% elseif not town.chaos %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_toggle_chaos', id: town.id}) }}" x-param="1">{{ 'Chaos-Modus'|trans({},'admin') }}</option>
									{% endif %}
									{% if town.devastated %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_toggle_devas', id: town.id}) }}" x-param="0">{{ 'Stadt reparieren'|trans({},'admin') }}</option>
									{% else %}
										<option value="{{ url('admin_town_manage', {action: 'dbg_toggle_devas', id: town.id}) }}" x-param="1">{{ 'Stadt zerstören'|trans({},'admin') }}</option>
									{% endif %}
								</optgroup>
							{% endif %}

						{% endif %}
					</select>
					<div id="execute_button" class="button inline small">{{ 'Ausführen'|trans({},'admin') }}</div>
				</div>
			</div>
			<div class="row">
				<div class="padded cell rw-4 note note-lightest"><label for="activate-event">{{ 'Stadt-Event'|trans({},'admin') }}</label></div>
				<div class="padded cell rw-8">
                    {% if current_event is not null and current_event|length > 1 %}
                        <span class="small">{{ current_event|map(e=>e.name)|join(', ') }}</span>
                    {% endif %}
					<select id="activate-event">
						<option value="">{{ "Kein"|trans({}, 'global') }}</option>
						{% for eventName,event in events %}
							<option value="{{ eventName }}" x-param="{{ eventName }}" {% if current_event is not null and current_event[0].name == eventName %}selected{% endif %}>{{ event.conf.name|trans({}, 'game') }}</option>
						{% endfor %}
					</select>
					<div id="set_event_button" class="button inline small">{{ 'Ausführen'|trans({},'admin') }}</div>
				</div>
			</div>
			<div class="row">
				<div class="padded cell rw-4 note note-lightest"><label for="switch-language">{{ 'Sprache wechseln'|trans({},'admin') }}</label></div>
				<div class="padded cell rw-8">
					<select id="switch-language">
						{% for lang in langs %}
							{% if lang != town.language %}
								<option x-param="{{ lang }}" value="{{ lang }}">{{ lang }}</option>
							{% endif %}
						{% endfor %}
					</select>
					<div id="set_language_button" class="button inline small">{{ 'Ausführen'|trans({},'admin') }}</div>
				</div>
			</div>

		</div>
		<div class="cell padded rw-6 rw-sm-12">
			<hordes-map id="global-map" data-react-mount="map" data-map="{{ map_public_json }}"></hordes-map>
			{% if is_granted("ROLE_ADMIN") %}
				<div id="zone_floor"></div>
				<div id="dash_zone_generator" x-target="zone" x-id="">
					{{ item_creator(itemPrototypes, 'zone') }}
				</div>
				<div class="lightbox">
					<div class="row">
						<div class="cell rw-12 padded">
							<label for="zone_digs">{{ 'Verbleibe Zonengrabungen:'|trans({}, 'admin') }}</label>
						</div>
						<div class="cell padded">
							<input type="number" id="zone_digs" class="inline" />
						</div>
						<div class="cell padded">
							<button id="zone_dig_set" class="small inline icon-only"><img alt="✓" src="{{ asset('build/images/icons/done.png') }}" /><div class="tooltip">{{'Setzen'|trans({}, 'admin')}}</div></button><br />
						</div>
					</div>
					<div class="row">
						<div class="cell rw-12 padded">
							<label for="ruin_digs">{{ 'Verbleibende Ruinengrabungen:'|trans({}, 'admin') }}</label>
						</div>
						<div class="cell padded">
							<input type="number" id="ruin_digs" class="inline" />
						</div>
						<div class="cell padded">
							<button id="ruin_dig_set" class="small inline icon-only"><img alt="✓" src="{{ asset('build/images/icons/done.png') }}" /><div class="tooltip">{{'Setzen'|trans({}, 'admin')}}</div></button><br />
						</div>
					</div>
					<div class="row">
						<div class="cell rw-12 padded">
							<label for="ruin_bury">{{ 'AP zum Freilegen der Ruine:'|trans({}, 'admin') }}</label>
						</div>
						<div class="cell padded">
							<input type="number" id="ruin_bury" class="inline" />
						</div>
						<div class="cell padded">
							<button id="ruin_bury_set" class="small inline icon-only"><img alt="✓" src="{{ asset('build/images/icons/done.png') }}" /><div class="tooltip">{{'Setzen'|trans({}, 'admin')}}</div></button><br />
						</div>
					</div>
					<div class="row">
						<div class="cell rw-12 padded">
							<label for="ruin_camp_level">{{ 'Camping-Ausbaulevel:'|trans({}, 'admin') }}<div class="small hidden" id="ruin_camp_base">{{ 'Basis:'|trans({}, 'admin') }} <span></span></div></label>
						</div>
						<div class="cell padded">
							<input type="number" step="0.1" id="ruin_camp_level" class="inline" />
						</div>
						<div class="cell padded">
							<button id="ruin_camp_level_set" class="small inline icon-only"><img alt="✓" src="{{ asset('build/images/icons/done.png') }}" /><div class="tooltip">{{'Setzen'|trans({}, 'admin')}}</div></button><br />
						</div>
					</div>
				</div>
                <div id="dash_zone_log" class="hidden">
                    <hordes-log id="admin-log" data-day="{{ town.day }}" data-react-mount="beyond-log" data-etag="{{ date().timestamp }}" data-domain="admin/zone/0" data-entries="150" data-indicators="1" data-inline-days="1"></hordes-log>
                </div>
			{% endif %}
		</div>
	</div>

{% endblock %}
{% block js %}
	{{ parent() }}
	{% if is_granted("ROLE_ADMIN") %}
		{{ item_creator_js('[x-id][x-target="zone"]', path('admin_spawn_item', {id: town.id}), path('admin_town_dashboard', {id: town.id}), 'zone') }}
	{% endif %}
	<script>
        let fun_api_call = function(api_url, elem) {
            if (!api_url) return;
            const url = elem.getAttribute('x-alt-url');
            const query = elem.getAttribute('x-query');
            const param = elem.getAttribute('x-param');

            let q_param = null;
            if (query) {
                q_param = prompt(query, '');
                if (q_param === null) return;
            } else if (param) q_param = param;

            $.ajax.easySend( api_url, {param: q_param},
                function () {
                    $.ajax.load(null, url ? url : '{{ path('admin_town_dashboard', {id: town.id}) }}', true);
                } );
        }

        document.getElementById('execute_button').addEventListener('click', function() {
            fun_api_call(document.getElementById('administer-town').value,document.querySelector('#administer-town option:checked'));
        });
        document.getElementById('set_event_button').addEventListener('click', function() {
            fun_api_call("{{ path('admin_town_set_event', {id: town.id}) }}", document.querySelector('#activate-event option:checked'));
        });
        document.getElementById('set_language_button').addEventListener('click', function() {
            fun_api_call("{{ path('admin_town_set_lang', {id: town.id}) }}", document.querySelector('#switch-language option:checked'));
        });

		{% if is_granted("ROLE_ADMIN") %}
        document.querySelector('hordes-map')?.addEventListener("zone-clicked", function(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            let target = ev.explicitOriginalTarget;
            document.getElementById("dash_zone_generator").setAttribute('x-id', target.getAttribute("x-id"));
            $.ajax.easySend('{{ url('get_zone_infos', {id: town.id}) }}', {'zone_id': target.getAttribute("x-id")}, function(data){
                document.querySelector("#zone_floor").innerHTML = data.view;
                document.querySelector("#zone_floor .inventory").classList.add('desert');
                document.querySelector("#zone_floor .inventory .title").innerText = "{{ 'Zone'|trans({}, 'admin') }} [" + data.zone_coords.x + ", " + data.zone_coords.y + "]";
                let items = document.querySelectorAll('#zone_floor .inventory .item:not(.locked)[x-item-id]');
                for (let i = 0; i < items.length; i++)
                    items[i].addEventListener('click', function() {
                        let change = 'remove';
                        const item_id = this.getAttribute('x-item-id');
                        $.ajax.easySend('{{ path('admin_town_item', {id: town.id}) }}', {
                                item: item_id, change: change, qty: '1'
                            },
                            function () {
                                let itemTarget = document.querySelector('#zone_floor .inventory .item[x-item-id="' + item_id + '"]');
                                itemTarget.parentElement.removeChild(itemTarget);
                            }
                        );
                    });
                document.querySelectorAll("#zone_floor .item div.tooltip").forEach( elem => $.html.handleTooltip( elem ));
                document.getElementById("zone_digs").value = data.zone_digs;
                document.getElementById("ruin_digs").value = data.ruin_digs;
                document.getElementById("ruin_bury").value = data.ruin_bury;
                document.getElementById("ruin_camp_level").value = data.camp_levl;
                document.querySelector("#ruin_camp_base>span").innerText = data.ruin_camp;
                document.getElementById("ruin_camp_base").classList.toggle('hidden', data.ruin_camp === null);
                document.getElementById("admin-log").dataset.domain = 'admin/zone/' + target.getAttribute("x-id");
                document.getElementById("dash_zone_log").classList.toggle('hidden', false);
            });
		})

        let set_zone_digs = document.getElementById("zone_dig_set");
        if(set_zone_digs) set_zone_digs.addEventListener('click', function(){
            $.ajax.easySend('{{ path('set_zone_attribs', {'id': town.id}) }}', {'target': 'zone', 'zone_id': document.getElementById("dash_zone_generator").getAttribute('x-id'), 'value': document.getElementById('zone_digs').value }, function(){
                $.ajax.load(null, '{{ path('admin_town_dashboard', {id: town.id}) }}', true);
            })
        })

        let set_ruin_digs = document.getElementById("ruin_dig_set");
        if(set_ruin_digs) set_ruin_digs.addEventListener('click', function(){
            $.ajax.easySend('{{ path('set_zone_attribs', {'id': town.id}) }}', {'target': 'ruin', 'zone_id': document.getElementById("dash_zone_generator").getAttribute('x-id'), 'value': document.getElementById('ruin_digs').value }, function(){
                $.ajax.load(null, '{{ path('admin_town_dashboard', {id: town.id}) }}', true);
            })
        })

        let set_ruin_bury = document.getElementById("ruin_bury_set");
        if(set_ruin_bury) set_ruin_bury.addEventListener('click', function(){
            $.ajax.easySend('{{ path('set_zone_attribs', {'id': town.id}) }}', {'target': 'bury', 'zone_id': document.getElementById("dash_zone_generator").getAttribute('x-id'), 'value': document.getElementById('ruin_bury').value }, function(){
                $.ajax.load(null, '{{ path('admin_town_dashboard', {id: town.id}) }}', true);
            })
        })

        let set_ruin_camp = document.getElementById("ruin_camp_level_set");
        if(set_ruin_camp) set_ruin_camp.addEventListener('click', function(){
            $.ajax.easySend('{{ path('set_zone_attribs', {'id': town.id}) }}', {'target': 'camp', 'zone_id': document.getElementById("dash_zone_generator").getAttribute('x-id'), 'value': document.getElementById('ruin_camp_level').value }, function(){
                $.ajax.load(null, '{{ path('admin_town_dashboard', {id: town.id}) }}', true);
            })
        })
        {% endif %}
	</script>
{% endblock %}