{% extends 'ajax/admin/towns/explorer_shell.html.twig' %}

{% block explorer_content %}
	{% macro building_entry(building, buildable, n, dict, available) %}
		{% if available[building.id] is defined %}
			{% set fromTown = available[building.id] %}
		{% endif %}
		{# @var building \App\Entity\BuildingPrototype #}
		{# @var fromTown \App\Entity\Building #}

        {% if fromTown is defined or building.blueprint < 6 %}
		    <div class="row {% if not buildable %}locked{% elseif (fromTown is defined and fromTown.complete) %}complete{% endif %} {% if n > 0 %}lv-{{ min(n,6) }}{% else %}root{% endif %}">
			<div class="padded cell rw-5 rw-lg-12">
				{% if not fromTown is defined %}
					<label style="margin-left: -{{ min(n,6) * 16 }}px;float: left;">
						<input type="checkbox" x-prototype-id="{{ building.id }}" x-building-admin-action="addToUnlockList" />
						<div class="tooltip help">{{ 'Markieren, um diese Baustelle zur Liste der freizuschaltenden Baustellen in der Stadt hinzuzufügen.'|trans({},'admin') }}</div>
					</label>
					<label>
						<input type="checkbox" x-prototype-id="{{ building.id }}" x-building-admin-action="addToTown" />
						<div class="tooltip help">{{ 'Markieren, um diese Baustelle freizuschalten.'|trans({},'admin') }}</div>
					</label>
				{% else %}
					<div class="inline-block">
						<img class="link" src="{{ asset('build/images/icons/small_remove.gif') }}" alt="[X]" x-prototype-id="{{ building.id }}" x-building-admin-action="removeFromTown" />
						<div class="tooltip help">{{ 'Markieren, um diese Baustelle aus der Stadt zu entfernen.'|trans({},'admin') }}</div>
					</div>
				{% endif %}
				{% if buildable %}
					<img alt="" src="{{ asset('build/images/building/' ~ building.icon ~ '.gif' ) }}" >
				{% else %}
					<img alt="" src="{{ asset('build/images/icons/lock.gif' ) }}" >
				{% endif %}
                {% if building.blueprint >= 6 %}
                    <span style="color: red; font-weight: bold" title="{{ 'Dieses Gebäude ist veraltet.'|trans({},'admin') }}">{{ building.label|trans({},'buildings') }}</span>
                {% else %}
                    <span>{{ building.label|trans({},'buildings') }}</span>
                {% endif %}
				{% if building.temp %}
					<span>
							<img alt="(!)" src="{{ asset('build/images/icons/small_warning.gif') }}" />
							<div class="tooltip temp-building">
								<h1>{{ 'Temporäre Konstruktion!'|trans({}, 'buildings') }}</h1>
								{{ 'Diese Konstruktion kann nur einmal verwendet werden. Sie wird nach dem Angriff der Zombiehorde wieder abgerissen.'|trans({}, 'buildings')|raw }}<br /><em>{{'Wenn ihr wollt, könnt irh sie morgen nochmal bauen.'|trans({}, 'buildings')}}</em>
							</div>
						</span>
				{% endif %}
                {% if fromTown is defined and fromTown.complete and building.maxLevel > 0 %}
                    <span class="small">{{ 'Level {current} / {max}'|trans({current: fromTown.level, max: building.maxLevel},'admin') }}</span>
                {% elseif building.maxLevel > 0 %}
                    <span class="small">{{ 'Anzahl Level: {max}'|trans({max: building.maxLevel},'admin') }}</span>
                {% endif %}
				{% if building.defense > 0 %}
					<div class="float-right defense">
						{% if building.defense > 0 %}
							{{ building.defense }}
						{% endif %}
					</div>
				{% endif %}
			</div>
			{% if fromTown is defined %}
				<div class="padded cell rw-3 rw-lg-5 rw-sm-12 no-ws">
					{% if fromTown.ap > 0 and not fromTown.complete %}
						<div class="ap-bar">
							<div class="bar" style="width: {{ 100*(fromTown.ap/building.ap) }}%"></div>
						</div>
					{% elseif fromTown.complete and fromTown.hp < building.hp %}
						<div class="ap-bar">
							<div class="bar" style="width: {{ 100*(fromTown.hp/((building.hp)|round)) }}%"></div>
							<div class="tooltip"><em>{{"Zustand:"|trans({}, 'game')}}</em> {{fromTown.hp}}/{{building.hp}}</div>
						</div>
					{% endif %}

					<div class="build-req">
						<div class="ap">{{ fromTown.ap }}/{{ building.ap }}</div>
					</div>
				</div>
				<div class="padded cell rw-4 rw-lg-7 rw-sm-12 right">
                    {% if fromTown.complete and building.maxLevel > 0 %}
                        {% if fromTown.level < building.maxLevel %}
                            <button class="inline build-btn" x-building-id="{{ fromTown.id }}" data-level="{{ fromTown.level + 1 }}" x-building-admin-action="lv"><img alt="+" src="{{ asset('build/images/icons/small_more2.gif') }}"></button>
                        {% endif %}
                        {% if fromTown.level > 0 %}
                            <button class="inline build-btn" x-building-id="{{ fromTown.id }}" data-level="{{ fromTown.level - 1 }}" x-building-admin-action="lv"><img alt="-" src="{{ asset('build/images/icons/small_minus.gif') }}"></button>
                        {% endif %}
                    {% endif %}
					<button class="inline build-btn" x-building-id="{{ fromTown.id }}" x-building-admin-action="{% if fromTown.complete %}setHp{% else %}setAp{% endif %}"><img alt="E" src="{{ asset('build/images/forum/edit.png') }}" /></button>
					{% if not fromTown.complete %}
						<button class="inline build-btn" x-building-id="{{ fromTown.id }}" x-building-admin-action="complete"><img alt="ok" src="{{ asset('build/images/icons/done.png') }}" /></button>
					{% else %}
						<button class="inline build-btn" x-building-id="{{ fromTown.id }}" x-building-admin-action="destroy"><img alt="[x]" src="{{ asset('build/images/icons/small_remove.gif') }}" /></button>
						<button class="inline build-btn" x-building-id="{{ fromTown.id }}" x-building-admin-action="trigger_n" title="{{ 'Gebäude-Effekt auslösen'|trans({},'admin') }}"><img alt="[n]" src="{{ asset('build/images/icons/small_action.gif') }}" /></button>
					{% endif %}
				</div>
			{% endif %}
		</div>
		    {% if n < 20 and dict[building.id] is not empty %}
		    	{% for sub_building in dict[building.id] %}
		    		{{ _self.building_entry(sub_building, buildable and fromTown is defined and fromTown.complete , n+1, dict, available) }}
		    	{% endfor %}
		    {% endif %}
        {% endif %}
	{% endmacro %}

	{# @var rootBuildings \App\Entity\BuildingPrototype[] #}
	<div>
		<button x-building-admin-action="unlockCheckedBuildings" class="inline"><i class="fa fa-unlock-alt"></i> Unlock checked buildings</button>
		<ul class="buildings-tabs tabs plain" x-tab-group="buildings" x-tab-control>
			<li class="tab" x-tab-id="all">
				<div class="tab-link">
					<img class="hide-desktop" alt="*" src="{{ asset( 'build/images/icons/small_new.gif' ) }}" >
					<span class="hide-lg hide-md hide-sm">{{ 'Alle'|trans({},'game') }}</span>
				</div>
			</li>
			{% for building in rootBuildings %}
				<li class="tab" x-tab-id="type_{{ building.icon }}">
					<div class="tab-link">
						<img class="hide-desktop" alt="" src="{{ asset('build/images/building/' ~ building.icon ~ '.gif' ) }}" >
						{% set label = building.label|trans({}, 'buildings') %}
						<span class="hide-lg hide-md hide-sm">{{ label|length > 12 ? (label|slice(0,10) ~ '...') : label }}</span>
					</div>
				</li>
			{% endfor %}
		</ul>
	</div>

	{% for building in rootBuildings %}
		<div x-tab-group="buildings" x-tab-id="type_{{ building.icon }}" x-tab-target class="buildings type_{{ building.icon }}">{{ _self.building_entry(building, true, 0, dictBuildings, availBuldings) }}</div>
	{% endfor %}

	<button x-building-admin-action="unlockCheckedBuildings"><i class="fa fa-unlock-alt"></i> Unlock checked buildings</button>

{% endblock %}
{% block js %}
	{{ parent() }}
	<script>
        let buildingBtns = document.querySelectorAll("[x-building-admin-action]");
        for(let i = 0 ; i < buildingBtns.length ; i++) {
            buildingBtns[i].addEventListener('click', function() {
                let action = buildingBtns[i].getAttribute("x-building-admin-action");
                switch(action) {
                    case "setAp":
                        let ap = null, ap_valid = false;
                        do {
                            ap = window.prompt("{{ 'Baufortschritt setzen:'|trans({},'admin')|e('js') }}", "1");
                            if (ap === null) ap_valid = true;
                            else {
                                ap = parseInt(ap);
                                ap_valid = !isNaN(ap) && ap >= 0;
                            }
                        } while (!ap_valid);

                        if (ap === null) return;

                        $.ajax.easySend( '{{ path('admin_town_set_building_ap', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id"), 'ap': ap},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;

                    case "setHp":
                        let hp = null, hp_valid = false;
                        do {
                            hp = window.prompt("{{ 'Integrität setzen:'|trans({},'admin')|e('js') }}", "1");
                            if (hp === null) hp_valid = true;
                            else {
                                hp = parseInt(hp);
                                hp_valid = !isNaN(hp) && hp >= 0;
                            }
                        } while (!hp_valid);

                        if (hp === null) return;

                        $.ajax.easySend( '{{ path('admin_town_set_building_hp', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id"), 'hp': hp},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;

                    case "complete":
                        $.ajax.easySend( '{{ path('admin_town_set_building_ap', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id"), 'ap': 99999999},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;
                    case "destroy":
                        $.ajax.easySend( '{{ path('admin_town_set_building_ap', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id"), 'ap': 0},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;
                    case "trigger_n":
                        $.ajax.easySend( '{{ path('admin_town_trigger_building_nightly_effect', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id")},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;
                    case "lv":
                        $.ajax.easySend( '{{ path('admin_town_set_building_level', {id: town.id }) }}', {'building': buildingBtns[i].getAttribute("x-building-id"), 'level': buildingBtns[i].dataset.level ?? -1},
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            } );
                        break;
                    case "addToTown":
                        $.ajax.easySend("{{ path('admin_town_add_building', {id: town.id }) }}", {
                                'prototype_id': buildingBtns[i].getAttribute("x-prototype-id"),
                                'act': 1
                            },
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            }
                        );
                        break;
                    case "removeFromTown":
                        $.ajax.easySend("{{ path('admin_town_add_building', {id: town.id }) }}", {
                                'prototype_id': buildingBtns[i].getAttribute("x-prototype-id"),
                                'act': 0
                            },
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            }
                        );
                        break;
                    case "unlockCheckedBuildings":
                        let protos = [];
                        let checked = document.querySelectorAll('input[x-building-admin-action="addToUnlockList"]:checked');
                        checked.forEach(function(c) {
                            protos.push(c.getAttribute('x-prototype-id'));
                        })
                        $.ajax.easySend("{{ path('admin_town_add_building', {id: town.id }) }}", {
                                'prototype_id': protos,
                                'act': 1
                            },
                            function () {
                                $.ajax.load(null, '{{ path('admin_town_buildings', {id: town.id}) }}', true);
                            }
                        );
                        break;
                }
            });
        }
	</script>
{% endblock %}