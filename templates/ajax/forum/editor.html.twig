<div class="forum-editor">
    <div class="forum-editor-header">
        {% if tid is null %}
            <i>{{ 'Neuer Thread'|trans({},'global') }}</i>
        {% else %}
            <i>{{ 'Neuer Post'|trans({},'global') }}</i>
        {% endif %}
        <b>{{ app.user.username }}</b>
    </div>
    {% if tid is null %}
        <div class="row">
            <div class="cell rw-4 padded">
                <label for="forum-editor-title">{{ 'Titel'|trans({},'global') }}</label>
            </div>
            <div class="cell rw-8 padded">
                <input type="text" id="forum-editor-title" />
            </div>
        </div>
    {% endif %}
    <div class="row">
        <div class="cell rw-12">
            <ul class="tabs" x-tab-group="forum-editor" x-tab-control>
                <li x-tab-id="classic">{% trans from 'game' %}Klassischer Editor{% endtrans %}</li>
                <li x-tab-id="suneditor">{% trans from 'game' %}Grafischer Editor{% endtrans %}</li>
            </ul>
        </div>

    </div>
    <div x-tab-group="forum-editor" x-tab-id="classic" x-tab-target>
        <div class="row classic-editor">
            <div class="padded cell rw-12">
                <label>{{ 'Vorschau'|trans({},'global') }}</label>
                <div id="forum-editor-preview"></div>
                <br />
                <label for="forum-editor-text">{{ 'Deine Nachricht'|trans({},'global') }}</label>
                <div class="forum-button-bar">
                    <div x-forum-action="edit" x-text-wrap-node="b" class="forum-button"><i class="fa fa-bold"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="i" class="forum-button"><i class="fa fa-italic"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="u" class="forum-button"><i class="fa fa-underline"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="s" class="forum-button"><i class="fa fa-strikethrough"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="ul" class="forum-button"><i class="fa fa-list-ul"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="ol" class="forum-button"><i class="fa fa-list-ol"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="li" class="forum-button"><i class="fa fa-star-of-life"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="spoiler" class="forum-button"><i class="fa fa-eye-slash"></i></div>
                    <div x-forum-action="edit" x-text-wrap-node="glory" class="forum-button"><i class="fa fa-crown"></i></div>
                    <div x-forum-action="edit" x-text-insert-node="hr" class="forum-button"><i class="fa fa-grip-lines"></i></div>
                </div>

                <textarea id="forum-editor-text"></textarea>
            </div>
        </div>
    </div>
    <div x-tab-group="forum-editor" x-tab-id="suneditor" x-tab-target>
        <div class="row modern-editor">
            <div class="padded cell rw-12">
                <label for="forum-suneditor-text">{{ 'Deine Nachricht'|trans({},'global') }}</label>
                <textarea id="forum-suneditor-text"></textarea>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="padded cell rw-12 right">
            {% if is_granted("ROLE_ADMIN") %}
            <div id="crowpost" class="forum-checkbox">
                {# <span>{{ 'als '|trans({},'global') }}</span> #}
                {#<input class="forum-checkbox" type="radio" name="mod_answer" id="user_answer" checked="checked" />
                <label for="user_answer">{{ app.user.username }}</label> #}
                <input class="forum-checkbox" type="radio" id="radio-user" name="post-type" value="USER" {% if app.user.postAsDefault != "DEV" %}checked{% endif %}>
                <input class="forum-checkbox" type="radio" id="radio-crow" name="post-type" value="CROW">
                <input class="forum-checkbox" type="radio" id="radio-dev" name="post-type" value="DEV"{% if app.user.postAsDefault == "DEV" %}checked{% endif %}>
                <span id="crow_answer_content">{% if app.user.postAsDefault != "DEV" %}{{ app.user.username }}{% else %}{{ 'Dev'|trans({},'global') }}{% endif %}</span>

            </div>
            {% endif %}
            <div x-forum-action="send" class="forum-button">{{ 'Absenden'|trans({},'global') }}</div>
        </div>
    </div>

</div>
<script>
    (function() {

        let node_transfer_source = document.getElementById('forum-editor-text');
        let node_transfer_target = document.getElementById('forum-editor-preview');
        const transfer_to_preview = function() {

            let container_node = document.createElement('p');
            container_node.innerText = node_transfer_source.value.replace(/(\r\n|\n|\r)/gm,'{br}');

            const lego = function(blocks,elem) {
                for (let i = 0; i < blocks.length; i++) {
                    if (!blocks[i]) continue;
                    let node = null;
                    if (typeof blocks[i] === 'string')
                        node = document.createTextNode( blocks[i] );
                    if (typeof blocks[i] === 'object') {
                        node = document.createElement( blocks[i][1] );
                        node.appendChild( document.createTextNode( blocks[i][0] ) );
                        if (blocks[i][2]) node.classList.add(blocks[i][2]);
                    }
                    if (node) elem.parentNode.insertBefore(node, elem);
                }
                elem.parentNode.removeChild(elem);
            }

            const parseRangeBlocks = function(elem) {
                if (elem.nodeType === Node.ELEMENT_NODE && elem.tagName === 'br') {
                    return false;
                }
                let changed = false;
                if (elem.nodeType === Node.TEXT_NODE) {
                    const str = elem.textContent;
                    const regex_wrappers = /\[(.*?)]([\s\S]*?)\[\/\1]/gm;
                    let current_offset = 0;
                    let blocks = [];

                    for (const match of str.matchAll( regex_wrappers )) {
                        if (current_offset < match.index )
                            blocks.push(str.substr(current_offset,match.index-current_offset));

                        const tag = match[1].toLowerCase();
                        switch (tag) {
                            case 'b': case 'i': case 'u': case 's': case 'ul': case 'ol': case 'li': blocks.push( [ match[2], tag, null] ); break;
                            case 'spoiler': case 'glory': blocks.push( [ match[2], 'div', tag] ); break;
                            default: blocks.push( match[0] ); break;
                        }
                        current_offset = (match[0].length + match.index);
                    }

                    if (blocks.length === 0) blocks.push( str );
                    else {
                        changed = true;
                        if (current_offset < str.length) blocks.push( str.substr( current_offset ) );
                    }

                    lego(blocks,elem);
                } else if (elem.nodeType === Node.ELEMENT_NODE) {
                    let children = elem.childNodes;
                    for (let i = 0; i < children.length; i++)
                        changed |= parseRangeBlocks(children[i]);
                }
                return changed;
            }
            const parseInsets = function(elem, listspace = false) {
                if (elem.nodeType === Node.TEXT_NODE) {
                    const str = elem.textContent;
                    const regex_wrappers = /{([a-z,A-Z]+)}|{([a-z,A-Z]+),([\w]*)}|{([a-z,A-Z]+)(\d+)}/g;
                    let current_offset = 0;
                    let blocks = [];

                    for (const match_r of str.matchAll( regex_wrappers )) {

                        let match = [match_r[0], undefined, undefined];
                        if      (match_r[1] !== undefined) match = [ match_r[0], match_r[1], undefined ];
                        else if (match_r[2] !== undefined) match = [ match_r[0], match_r[2], match_r[3] ];
                        else if (match_r[4] !== undefined) match = [ match_r[0], match_r[4], match_r[5] ];

                        if (current_offset < match_r.index )
                            blocks.push(str.substr(current_offset,match_r.index-current_offset));

                        const tag = match[1].toLowerCase();
                        switch (tag) {
                            case 'hr': blocks.push( [ '', tag, null] ); break;
                            case 'br': blocks.push( listspace ? null : [ '', tag, null] ); break;
                            case 'dice': case 'dc': case 'de': case 'des': case 'd':
                                if (["4","6","8","10","12","20","100"].indexOf( match[2] ) !== -1) blocks.push( [ '???', 'div', 'dice-' + match[2]] );
                                else blocks.push( match[0] );
                                break;
                            case 'letter': case 'lettre': blocks.push( [ '???', 'div', 'letter-a'] ); break;
                            case 'consonant': case 'consonne': blocks.push( [ '???', 'div', 'letter-c'] ); break;
                            case 'vowel': case 'voyelle': blocks.push( [ '???', 'div', 'letter-v'] ); break;
                            case 'pfc': case 'rps': case 'ssp': blocks.push( [ '???', 'div', 'rps'] ); break;
                            case 'flip': case 'coin': case 'ht': case 'pf': case 'mw': blocks.push( [ '???', 'div', 'coin'] ); break;
                            case 'carte': case 'card': case 'skat': case 'blatt': blocks.push( [ '???', 'div', 'card'] ); break;
                            default: blocks.push( match[0] ); break;
                        }
                        current_offset = (match[0].length + match_r.index);
                    }

                    if (blocks.length === 0) blocks.push( str );
                    else {
                        changed = true;
                        if (current_offset < str.length) blocks.push( str.substr( current_offset ) );
                    }

                    lego(blocks,elem);
                } else {
                    let is_list_wrapper = ['UL','OL'].indexOf(elem.tagName) !== -1;
                    let is_list_entry   = ['LI'].indexOf(elem.tagName) !== -1;
                    let children = elem.childNodes;
                    for (let i = 0; i < children.length; i++)
                        parseInsets(children[i], (listspace || is_list_wrapper) && !is_list_entry);
                }
            }

            let changed = true;
            while (changed) changed &= parseRangeBlocks(container_node);
            parseInsets(container_node);

            let c = null;
            while ((c = node_transfer_target.lastChild))
                node_transfer_target.removeChild(c)

            while ((c = container_node.firstChild))
                node_transfer_target.appendChild(c);
        }

        node_transfer_source.addEventListener('input', transfer_to_preview);

        $.html.addEventListenerAll( '[x-forum-action="edit"][x-text-wrap-node]', 'click', function (e,elem) {
            e.preventDefault();
            e.stopPropagation();

            const tag = elem.getAttribute('x-text-wrap-node');
            const content = node_transfer_source.value;
            const s_start = node_transfer_source.selectionStart;
            const s_end = node_transfer_source.selectionEnd;

            node_transfer_source.value =
                content.substr( 0, s_start ) +
                '[' + tag + ']' +
                content.substr( s_start, s_end - s_start ) +
                '[/' + tag + ']' +
                content.substr( s_end );

            node_transfer_source.setSelectionRange( s_start + tag.length + 2, s_end + tag.length + 2 );
            window.setTimeout( function() {node_transfer_source.focus()}, 10 )
            transfer_to_preview();
        } );
        $.html.addEventListenerAll( '[x-forum-action="edit"][x-text-insert-node]', 'click', function (e,elem) {
            e.preventDefault();
            e.stopPropagation();

            const tag = elem.getAttribute('x-text-insert-node');
            const content = node_transfer_source.value;
            const s_start = node_transfer_source.selectionStart;
            const s_end = node_transfer_source.selectionEnd;

            node_transfer_source.value =
                content.substr( 0, s_start ) +
                '{' + tag + '}' +
                content.substr( s_start );

            node_transfer_source.setSelectionRange( s_start + tag.length + 2, s_end + tag.length + 2 );
            window.setTimeout( function() {node_transfer_source.focus()}, 10 )
            transfer_to_preview();
        } );


        const sun_editor_plugin_base = function(name, title, innerHTML, tag, classNameInternal, classNameExternal) {
            return {
                // @Required @Unique
                // plugin name
                name: name,
                // @Required
                // data display
                display: 'command',

                // @Options
                title: title,
                buttonClass: '',
                innerHTML: innerHTML,

                // @Required
                // add function - It is called only once when the plugin is first run.
                // This function generates HTML to append and register the event.
                // arguments - (core : core object, targetElement : clicked button element)
                add: function (core, targetElement) {
                    const context = core.context;
                    const new_tag = core.util.createElement(tag);
                    core.util.addClass(new_tag, classNameInternal);
                    for (let i = 0; i < classNameExternal.length; i++)
                        core.util.addClass(new_tag, classNameExternal[i]);

                    // @Required
                    // Registering a namespace for caching as a plugin name in the context object
                    context[name + '_command'] = {
                        targetButton: targetElement,
                        tag: new_tag
                    };
                },

                // @Overriding
                // Plugins with active methods load immediately when the editor loads.
                // Called each time the selection is moved.
                active: function (element) {
                    if (!element) {
                        this.util.removeClass(this.context[name + '_command'].targetButton, 'active');
                    } else if (this.util.hasClass(element, classNameInternal)) {
                        this.util.addClass(this.context[name + '_command'].targetButton, 'active');
                        return true;
                    }

                    return false;
                },
            }
        }
        const sun_editor_range_prototype = function(name, title, innerHTML, tag, classNameInternal, classNameExternal) {
            let base = sun_editor_plugin_base(name, title, innerHTML, tag, classNameInternal, classNameExternal);
            base.action = function () {
                // @Required
                // The behavior of the "command plugin" must be defined in the "action" method.
                const new_tag = this.util.getRangeFormatElement(this.getSelectionNode());

                if (this.util.hasClass(new_tag, classNameInternal)) {
                    this.detachRangeFormatElement(new_tag, null, null, false, false);
                } else {
                    this.applyRangeFormatElement(this.context[name + '_command'].tag.cloneNode(false));
                }
            }
            return base;
        }
        const spoiler_command = sun_editor_range_prototype('spoiler','Spoiler','<i class="fas fa-carrot"></i>','div','__se__format__spoiler',['spoiler']);
        const glory_command   = sun_editor_range_prototype('glory','Glory','<i class="fas fa-crown"></i>','div','__se__format__glory',['glory']);

        const editor = SUNEDITOR.create((document.getElementById('forum-suneditor-text') || 'forum-suneditor-text'),{
            // All of the plugins are loaded in the "window.SUNEDITOR" object in dist/suneditor.min.js file
            plugins : {
                spoiler_command,
                glory_command
            },
            buttonList: [
                ['undo', 'redo'],
                ['bold', 'underline', 'italic', 'strike'],
                ['removeFormat'],
                ['outdent', 'indent', 'list'],
                ['blockquote', 'link' {% if app.user.isAdmin %}, 'image'{% endif %}],
                ['spoiler', 'glory'],
            ],
            // Insert options
            // Language global object (default: en)
            //lang: SUNEDITOR_LANG."{{ (app.request.locale|e('html_attr')|split('_', 2))[0] }}"
        });

        // Post as crow toggle
        {% if is_granted("ROLE_ADMIN") %}
            function changeHandler(){
                switch (document.querySelector("input[name=post-type]:checked").value) {
                    case "USER":
                        document.getElementById("radio-crow").checked = true;
                        document.getElementById("radio-dev").checked = false;
                        document.getElementById("radio-user").checked = false;
                        document.getElementById('crow_answer_content').innerHTML = "{{ 'Rabe'|trans({},'global') }}";
                        break;
                    case "CROW":
                        document.getElementById("radio-crow").checked = false;
                        document.getElementById("radio-dev").checked = true;
                        document.getElementById("radio-user").checked = false;
                        document.getElementById('crow_answer_content').innerHTML = "{{ 'Dev'|trans({},'global') }}";
                        break;
                    case "DEV":
                        document.getElementById("radio-crow").checked = false;
                        document.getElementById("radio-dev").checked = false;
                        document.getElementById("radio-user").checked = true;
                        document.getElementById('crow_answer_content').innerHTML = "{{ app.user.username }}";
                        break;
                }
            }
            document.getElementById('crowpost').addEventListener('click', changeHandler);       
        {% endif %}

        let send_buttons = document.querySelectorAll('[x-forum-action=send]');
        for (let i = 0; i < send_buttons.length; i++) {
            send_buttons[i].addEventListener('click', function() {
                let target_url, target_payload;
                console.log(document.querySelector('[x-tab-id="classic"].selected'));
                let content = document.querySelector('[x-tab-id="classic"].selected')
                    ? document.getElementById('forum-editor-preview').innerHTML
                    : document.getElementById('suneditor_forum-suneditor-text').getElementsByClassName("sun-editor-editable")[0].innerHTML;
                {% if tid is null %}
                    target_url = '{{ path('forum_new_thread_controller', {id: fid}) }}';
                    target_payload = {
                        title: document.getElementById('forum-editor-title').value,
                        text: content,
                        {% if is_granted("ROLE_ADMIN") %}type: document.querySelector("input[name=post-type]:checked").value,{% endif %}
                    };
                {% else %}
                    target_url = '{{ path('forum_new_post_controller', {fid: fid, tid: tid}) }}';
                    target_payload = {
                        text: content,
                        {% if is_granted("ROLE_ADMIN") %}type: document.querySelector("input[name=post-type]:checked").value,{% endif %}
                    };
                {% endif %}
                $.ajax.easySend( target_url, target_payload,
                    function (data) {
                        $.ajax.load( null, data.url, true );
                    } );
            });
        }
    })();
</script>