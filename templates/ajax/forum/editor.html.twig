<div class="forum-editor">
    <div class="forum-editor-header">
        {% if tid is null %}
            <i>{{ 'Neuer Thread'|trans({},'global') }}</i>
        {% else %}
            <i>{{ 'Neuer Post'|trans({},'global') }}</i>
        {% endif %}
        <b>{{ app.user.username }}</b>
    </div>
    {% if tid is null %}
        <div class="row">
            <div class="cell rw-4 padded">
                <label for="forum-editor-title">{{ 'Titel'|trans({},'global') }}</label>
            </div>
            <div class="cell rw-8 padded">
                <input type="text" id="forum-editor-title" />
            </div>
        </div>
    {% endif %}
    <div class="row classic-editor">
        <div class="padded cell rw-12">
            <label for="forum-editor-text">{{ 'Deine Nachricht'|trans({},'global') }}</label>
            <div style="margin-bottom: 5px;">
                <div x-forum-action="edit" x-text-control-node="bold" class="forum-button"><i class="fa fa-bold"></i></div>
                <div x-forum-action="edit" x-text-control-node="italic" class="forum-button"><i class="fa fa-italic"></i></div>
                <div x-forum-action="edit" x-text-control-node="underline" class="forum-button"><i class="fa fa-underline"></i></div>
                <div x-forum-action="edit" x-text-control-node="strikeThrough" class="forum-button"><i class="fa fa-strikethrough"></i></div>
                <div x-forum-action="edit" x-text-control-node="indent" class="forum-button"><i class="fa fa-indent"></i></div>
                <div x-forum-action="edit" x-text-control-node="outdent" class="forum-button"><i class="fa fa-outdent"></i></div>
                <div x-forum-action="edit" x-text-control-node="insertUnorderedList" class="forum-button"><i class="fa fa-list"></i></div>
                <div x-forum-action="edit" x-text-control-node="insertOrderedList" class="forum-button"><i class="fa fa-list-ol"></i></div>
                <div x-forum-action="edit" x-text-control-node="insertHorizontalRule" class="forum-button"><i class="fa fa-grip-lines"></i></div>
            </div>
            <div contentEditable="true" id="forum-editor-text"></div>
        </div>
    </div>
    <div class="row modern-editor">
        <div class="padded cell rw-12">
            <label for="forum-suneditor-text">{{ 'Deine Nachricht'|trans({},'global') }}</label>
            <textarea id="forum-suneditor-text"></textarea>
        </div>
    </div>
    <div class="row">
        <div class="padded cell rw-12 right">
            {% if is_granted("ROLE_ADMIN") %}
            <div id="crowpost" class="forum-checkbox">
                {# <span>{{ 'als '|trans({},'global') }}</span> #}
                {#<input class="forum-checkbox" type="radio" name="mod_answer" id="user_answer" checked="checked" />
                <label for="user_answer">{{ app.user.username }}</label> #}
                <input class="forum-checkbox" type="radio" id="radio-user" name="post-type" value="USER" checked>
                <input class="forum-checkbox" type="radio" id="radio-crow" name="post-type" value="CROW">
                <input class="forum-checkbox" type="radio" id="radio-dev" name="post-type" value="DEV">
                <span id="crow_answer_content">{{ app.user.username }}</span>

            </div>
            {% endif %}
            <div x-forum-action="send" class="forum-button">{{ 'Absenden'|trans({},'global') }}</div>
        </div>
    </div>

</div>
<script>
    (function() {

        const sun_editor_plugin_base = function(name, title, innerHTML, tag, classNameInternal, classNameExternal) {
            return {
                // @Required @Unique
                // plugin name
                name: name,
                // @Required
                // data display
                display: 'command',

                // @Options
                title: title,
                buttonClass: '',
                innerHTML: innerHTML,

                // @Required
                // add function - It is called only once when the plugin is first run.
                // This function generates HTML to append and register the event.
                // arguments - (core : core object, targetElement : clicked button element)
                add: function (core, targetElement) {
                    const context = core.context;
                    const new_tag = core.util.createElement(tag);
                    core.util.addClass(new_tag, classNameInternal);
                    for (let i = 0; i < classNameExternal.length; i++)
                        core.util.addClass(new_tag, classNameExternal[i]);

                    // @Required
                    // Registering a namespace for caching as a plugin name in the context object
                    context[name + '_command'] = {
                        targetButton: targetElement,
                        tag: new_tag
                    };
                },

                // @Overriding
                // Plugins with active methods load immediately when the editor loads.
                // Called each time the selection is moved.
                active: function (element) {
                    if (!element) {
                        this.util.removeClass(this.context[name + '_command'].targetButton, 'active');
                    } else if (this.util.hasClass(element, classNameInternal)) {
                        this.util.addClass(this.context[name + '_command'].targetButton, 'active');
                        return true;
                    }

                    return false;
                },
            }
        }

        const sun_editor_range_prototype = function(name, title, innerHTML, tag, classNameInternal, classNameExternal) {
            let base = sun_editor_plugin_base(name, title, innerHTML, tag, classNameInternal, classNameExternal);
            base.action = function () {
                // @Required
                // The behavior of the "command plugin" must be defined in the "action" method.
                const new_tag = this.util.getRangeFormatElement(this.getSelectionNode());

                if (this.util.hasClass(new_tag, classNameInternal)) {
                    this.detachRangeFormatElement(new_tag, null, null, false, false);
                } else {
                    this.applyRangeFormatElement(this.context[name + '_command'].tag.cloneNode(false));
                }
            }
            return base;
        }

        const sun_editor_monolyth_prototype = function(name, title, innerHTML, tag, classNameInternal, classNameExternal, staticHTML) {
            let base = sun_editor_plugin_base(name, title, innerHTML, tag, classNameInternal, classNameExternal);
            base.action = function () {
                // @Required
                // The behavior of the "command plugin" must be defined in the "action" method.
                let new_node = this.context[name + '_command'].tag.cloneNode(false);


                let range = this.getRange();
                if (!range.collapsed) return;
                let parent = range.startContainer.parentNode;
                if (staticHTML) {
                    const inner = document.createElement('span');
                    inner.innerHTML = staticHTML;
                    new_node.setAttribute('contenteditable','false');
                    new_node.appendChild(inner);
                } else new_node.setAttribute('contenteditable','false');

                if (parent.classList.contains('sun-editor-editable')) {
                    parent.appendChild(new_node);
                } else {
                    const before = parent.innerHTML.substring(0,range.startOffset);
                    const after = parent.innerHTML.substring(range.startOffset);
                    parent.innerHTML = before + new_node.outerHTML + after;
                }
            }
            return base;
        }

        const sun_editor_group = function(name, title, innerHTML, plugins) {
            return {
                // @Required @Unique
                // plugin name
                name: name,
                // @Required
                // data display
                dataDisplay: 'container',
                display: 'container',

                // @Options
                title: title,
                buttonClass: '',
                innerHTML: innerHTML,

                // @Required
                // add function - It is called only once when the plugin is first run.
                // This function generates HTML to append and register the event.
                // arguments - (core : core object, targetElement : clicked button element)
                add: function (core, targetElement) {

                    // @Required
                    // Registering a namespace for caching as a plugin name in the context object
                    const context = core.context;
                    context.custom_container = {};

                    // Generate submenu HTML
                    // Always bind "core" when calling a plugin function
                    let listDiv = this.setSubmenu.call(core);

                    // You must bind "core" object when registering an event.
                    /** add event listeners */
                    listDiv.querySelector('.se-submenu-form-group').addEventListener('click', this.onClick.bind(core));

                    // @Required
                    // You must add the "submenu" element using the "core.initMenuTarget" method.
                    /** append target button menu */
                    core.initMenuTarget(this.name, targetElement, listDiv);
                },

                setSubmenu: function () {
                    const listDiv = this.util.createElement('DIV');
                    listDiv.className = 'se-list-layer';
                    let html_build = '' +
                        '<div class="se-list-inner">' +
                            '<div class="se-submenu-form-group">';

                    for (let i = 0; i < plugins.length; i++) {
                        html_build +=
                            // @Required
                            // The "position" style of each element surrounding the button must be "relative".
                            // suneditor.css: .sun-editor .se-submenu-form-group > div {position:relative;}
                            '<div>' +
                                // @Required
                                // Enter the button name of the plug-in or default command in the button's "data-command"
                                '<button type="button" class="se-btn se-tooltip" data-command="' + plugins[i].name + '" style="margin: 0 !important;">' +
                                    plugins[i].innerHTML +
                                    '<span class="se-tooltip-inner">' +
                                        '<span class="se-tooltip-text">' + plugins[i].title + '</span>' +
                                    '</span>' +
                                '</button>' +
                            '</div>';
                    }
                    html_build +=
                            '</div>' +
                    '</div>';
                    listDiv.innerHTML = html_build;

                    return listDiv;
                },

                onClick: function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    let target = e.target;
                    let command = '';

                    while (!command && !/^UL$/i.test(target.tagName)) {
                        command = target.getAttribute('data-command');
                        if (command) break;
                        target = target.parentNode;
                    }

                    if (!command) return;

                    const plugin = this.plugins[command];
                    this.actionCall(command, (plugin ? plugin.display : ''), target);
                }
            };
        }


        const spoiler_command = sun_editor_range_prototype('spoiler','Spoiler','<i class="fas fa-carrot"></i>','div','__se__format__spoiler',['spoiler']);
        const glory_command   = sun_editor_range_prototype('glory','Glory','<i class="fas fa-crown"></i>','div','__se__format__glory',['glory']);

        const dice4_command   = sun_editor_monolyth_prototype('dice4','{{ 'Würfel'|trans({},'game')|e('js') }} (4)','<img alt="" src="{{ asset('build/images/forum/dice4.png') }}" />','div','__se__format__dice-4',['dice-4'], '???');
        const dice6_command   = sun_editor_monolyth_prototype('dice6','{{ 'Würfel'|trans({},'game')|e('js') }} (6)','<img alt="" src="{{ asset('build/images/forum/dice6.png') }}" />','div','__se__format__dice-6',['dice-6'], '???');
        const dice_group = sun_editor_group('dice','dice','<b>D</b>', [dice4_command,dice6_command]);

        const editor = SUNEDITOR.create((document.getElementById('forum-suneditor-text') || 'forum-suneditor-text'),{
            // All of the plugins are loaded in the "window.SUNEDITOR" object in dist/suneditor.min.js file
            plugins : {
                spoiler_command,
                glory_command,

                dice_group, dice4_command, dice6_command
            },
            buttonList: [
                ['undo', 'redo'],
                ['bold', 'underline', 'italic', 'strike'],
                ['removeFormat'],
                ['outdent', 'indent', 'list'],
                ['blockquote', 'link' {% if app.user.isAdmin %}, 'image'{% endif %}],
                ['spoiler', 'glory'],
                [{
                    name: 'dice',
                    dataDisplay:'container',
                    title: 'dice',
                    buttonClass:'',
                    innerHTML:'<i class="fa fa-dice"></i>'
                }]
            ],
            // Insert options
            // Language global object (default: en)
            //lang: SUNEDITOR_LANG."{{ (app.request.locale|e('html_attr')|split('_', 2))[0] }}"
        });

        const allowed_nodes  = [ 'br', 'b', 'strong', 'i', 'u', 'strike', 'div', 'blockquote', 'hr', 'ul', 'ol', 'li', 'style' ];
        const collapse_nodes = [ 'b', 'strong', 'i', 'u', 'strike' ];

        let clean_up = function( node, skip_first ) {
            if (!node) return;
            let styles = [];
            let current_node = node;
            do {
                let original_node = current_node;

                if (!skip_first) {
                    if (current_node.nodeType === Node.ELEMENT_NODE)
                        while(original_node.attributes.length > 0) original_node.removeAttribute(original_node.attributes[0].name);

                    if (current_node.nodeType === Node.ELEMENT_NODE && current_node.nodeName.toLowerCase() === 'style') styles.push( current_node );
                    if (current_node.nodeType === Node.ELEMENT_NODE && current_node.nodeName.toLowerCase() === 'p') {
                        let div = document.createElement('div');
                        current_node.after( div );
                        while (current_node.firstChild) div.appendChild(current_node.firstChild);
                    }

                    while (current_node.nodeType === Node.ELEMENT_NODE && current_node.nextSibling && collapse_nodes.indexOf(current_node.nodeName.toLowerCase()) >= 0 && current_node.nextSibling.nodeName === current_node.nodeName) {
                        let sib = current_node.nextSibling;
                        while (sib.firstChild) current_node.append( sib.firstChild );
                        sib.remove();
                    }
                }


                if (current_node.hasChildNodes())
                    current_node = current_node.firstChild;
                else {
                    if (current_node === node) current_node = null;
                    while (current_node && !current_node.nextSibling) current_node = current_node.parentNode;
                    if (current_node) current_node = current_node === node ? null : current_node.nextSibling;
                }

                if (!skip_first) {
                    if (original_node.nodeType === Node.ELEMENT_NODE && allowed_nodes.indexOf(original_node.nodeName.toLowerCase()) < 0) {
                        while (original_node.firstChild) original_node.before(original_node.firstChild);
                        original_node.remove();
                    }
                }

                skip_first = false;

            } while (current_node);
            for (let i = 0; i < styles.length; i++) styles[i].remove();
        }

        const observer = new MutationObserver( function(list,observer) {
            observer.disconnect();
            clean_up( document.getElementById('forum-editor-text'), true );
            observer.observe( document.getElementById('forum-editor-text'), { childList: true, subtree: true } );
        });
        observer.observe( document.getElementById('forum-editor-text'), { childList: true, subtree: true } );

        let text_buttons = document.querySelectorAll('[x-forum-action=edit][x-text-control-node]');
        for (let i = 0; i < text_buttons.length; i++) {
            text_buttons[i].addEventListener('mousedown', function(e) {
                e.preventDefault();
                const parent = document.getElementById('forum-editor-text');
                if (document.activeElement !== parent) return;
                const node_type = text_buttons[i].getAttribute('x-text-control-node');

                document.execCommand("styleWithCSS", null, "false");
                document.execCommand( node_type, false, null );

            });
        }

        // Post as crow toggle
        {% if is_granted("ROLE_ADMIN") %}
            function changeHandler(){
                switch (document.querySelector("input[name=post-type]:checked").value) {
                    case "USER":
                        document.getElementById("radio-crow").checked = true;
                        document.getElementById("radio-dev").checked = false;
                        document.getElementById("radio-user").checked = false;
                        document.getElementById('crow_answer_content').innerHTML = "{{ 'Rabe'|trans({},'global') }}";
                        break;
                    case "CROW":
                        document.getElementById("radio-crow").checked = false;
                        document.getElementById("radio-dev").checked = true;
                        document.getElementById("radio-user").checked = false;
                        document.getElementById('crow_answer_content').innerHTML = "{{ 'Dev'|trans({},'global') }}";
                        break;
                    case "DEV":
                        document.getElementById("radio-crow").checked = false;
                        document.getElementById("radio-dev").checked = false;
                        document.getElementById("radio-user").checked = true;
                        document.getElementById('crow_answer_content').innerHTML = "{{ app.user.username }}";
                        break;
                }
            };        
            document.getElementById('crowpost').addEventListener('click', changeHandler);       
        {% endif %}

        let send_buttons = document.querySelectorAll('[x-forum-action=send]');
        for (let i = 0; i < send_buttons.length; i++) {
            send_buttons[i].addEventListener('click', function() {
                let target_url, target_payload;
                {% if tid is null %}
                    target_url = '{{ path('forum_new_thread_controller', {id: fid}) }}';
                    target_payload = {
                        title: document.getElementById('forum-editor-title').value,
                        text: document.getElementById('suneditor_forum-suneditor-text').getElementsByClassName("sun-editor-editable")[0].innerHTML,
                        type: document.querySelector("input[name=post-type]:checked").value,
                    };
                {% else %}
                    target_url = '{{ path('forum_new_post_controller', {fid: fid, tid: tid}) }}';
                    target_payload = {
                        text: document.getElementById('suneditor_forum-suneditor-text').getElementsByClassName("sun-editor-editable")[0].innerHTML,
                        type: document.querySelector("input[name=post-type]:checked").value,
                    };
                {% endif %}
                $.ajax.easySend( target_url, target_payload,
                    function (data) {
                        $.ajax.load( null, data.url, true );
                    } );
            });
        }
    })();
</script>