{% extends "ajax/ajax.html.twig" %}
{% block text_menu_content %}
{% endblock %}
{% block ajax %}
    <div class="daily-attack row">
        <div class="content">
            <div class="animation">
                <canvas id="canvas" width="440" height="125" style="background-color:rgba(97, 45, 32, 1.00);"></canvas>
            </div>
            <p class="justify">
                {% trans from 'ghost' %}
                    <p>
                    Deine Stadt wird gerade von den Zombies <strong>angegriffen</strong>! Du hörst wie sie <strong>grunzend</strong> gegen eure Hütten schlagen. Dazwischen immer wieder <strong>Hilferufe</strong> und Schreie... Sie scheinen überall zu sein...
                    </p>
                    <p>
                    Was tust du, solange der Angriff tobt?               
                    </p>
                {% endtrans %}
            </p>
            <button x-ajax-href="{{ path('initial_landing') }}">{{ 'Seite neu laden'|trans({},'global') }}</button>
        </div>

        <div class="infos">
            <h2>{{'Was hat das zu bedeuten?'|trans({}, 'ghost')}}</h2>
            <img src="{{ asset('build/images/server.png')}}" alt="" class="art">
            <p>{{'Die Verdammten wird gerade von den Zombies überfallen! Es ist der tägliche Angriff!'|trans({}, 'ghost')}}</p>
            <p>{{'Registrierung sowie Log-in sind zur Zeit nicht möglich... Die Seite müsste gegen 00.30 wieder erreichbar sein.'|trans({}, 'ghost')}}</p>
            <p><em>{{'Und ja, es wird Tote geben...'|trans({}, 'ghost')}}</em></p>
        </div>
    </div>
{% endblock %}
{% block js %}
    <script>
        document.getElementById("gma").style.display = "none";
        var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
        function init() {
            canvas = document.getElementById("canvas");
            anim_container = document.getElementById("animation_container");
            dom_overlay_container = document.getElementById("dom_overlay_container");
            var comp=AdobeAn.getComposition("7AABF79FCD83E4468DF64867E8D1326A");
            var lib=comp.getLibrary();
            var loader = new createjs.LoadQueue(false);
            loader.addEventListener("fileload", function(evt){handleFileLoad(evt,comp)});
            loader.addEventListener("complete", function(evt){handleComplete(evt,comp)});
            var lib=comp.getLibrary();
            loader.loadManifest(lib.properties.manifest);
        }
        function handleFileLoad(evt, comp) {
            var images=comp.getImages();    
            if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }    
        }
        function handleComplete(evt,comp) {
            //This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
            var lib=comp.getLibrary();
            var ss=comp.getSpriteSheet();
            var queue = evt.target;
            var ssMetadata = lib.ssMetadata;
            for(i=0; i<ssMetadata.length; i++) {
                ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
            }
            exportRoot = new lib.attack_as3_HTML5Canvas();
            stage = new lib.Stage(canvas);  
            //Registers the "tick" event listener.
            fnStartAnimation = function() {
                stage.addChild(exportRoot);
                createjs.Ticker.framerate = lib.properties.fps;
                createjs.Ticker.addEventListener("tick", stage);
            }       
            //Code to support hidpi screens and responsive scaling.
            AdobeAn.makeResponsive(false,'both',false,1,[canvas,anim_container,dom_overlay_container]); 
            AdobeAn.compositionLoaded(lib.properties.id);
            fnStartAnimation();
        }

        //init();
    </script>
{% endblock %}