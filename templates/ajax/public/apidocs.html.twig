{% extends "ajax/ajax.html.twig" %}
{% block ajax %}
    <div id="api-docs" class="row api-docs">
        <div class="cell rw-12 padded">
            <table>
                <thead>
                    <tr><th>Request URL</th><th>return</th></tr>
                </thead>
                <tbody>
                    <tr><td>https://zombvival.de/myhordes/api/x/json/status</td><td><a>Status</a></td></tr>
                    <tr><td>https://zombvival.de/myhordes/api/x/json/items</td><td><a>Array&lt;Item&gt;</a></td></tr>
                    <tr><td>https://zombvival.de/myhordes/api/x/json/me</td><td><a>User</a></td></tr>
                    <tr><td>https://zombvival.de/myhordes/api/x/json/user?id=$user_id</td><td><a>User</a></td></tr>
                    <tr><td>https://zombvival.de/myhordes/api/x/json/map?mapId=$map_id</td><td><a>Map</a></td></tr>
                </tbody>
            </table>
<pre><a class="entity">&lt;Status&gt;</a> {
   attack: <span class="bool">Bool</span>,                   // True when the attack is in progress
   maintain: <span class="bool">Bool</span>                  // True when the game is in maintenance
}

<a class="entity">&lt;Map&gt;</a> {
   id: <span class="int">Int</span>,                        //ID de la map de jeu
   date: <span class="string">String</span>,                   //heure du serveur
   wid: <span class="int">Int</span>,                       //dimension de la carte
   hei: <span class="int">Int</span>,                       //dimension de la carte
   conspiracy: <span class="bool">Bool</span>,               //S'il y a insurrection
   bonusPts: <span class="int">Int</span>,                  //points bonus
   days: <span class="int">Int</span>,                      //jour de la ville   
   custom: <span class="bool">Bool</span>,                   //booléen qui indique si la ville est privée ou non
   zones: Array<a class="custom">&lt;Zone&gt;</a>,             //liste des zones connues
   citizens: Array<a class="custom">&lt;User&gt;</a>,          //liste des citoyens
   city: <a class="custom">&lt;City&gt;</a>,                   //informations de la ville
   cadavers: Array<a class="custom">&lt;Cadaver&gt;</a>,       //liste des cadavres
   expeditions: Array<a class="custom">&lt;Expedition&gt;</a>, //liste des expeditions
   season: <span class="int">Int</span>,                    //ID de la saison de la création de la ville
   shaman: <span class="int">Int</span>,                    //UID du joueur qui est chaman
   guide: <span class="int">Int</span>                      //UID du joueur qui est guide
}

<a class="entity">&lt;Zone&gt;</a> {
   x: <span class="int">Int</span>,                         //X par rapport au coin en haut à gauche
   y: <span class="int">Int</span>,                         //Y par rapport au coin en haut à gauche
   nvt: <span class="bool">Bool</span>,                      //Not visited today
   tag: null,                      //Tag de la zone
   danger: <span class="int">Int</span>,                    //Niveau de danger 0 = vert, 1 = vert-jaune, 2 = orange, 3 = rouge, 4 = bleu
   details: <a class="custom">&lt;ZoneInfo&gt;</a>,            //details de la zone
   items: Array<a class="custom">&lt;Item&gt;</a>,             //liste des items dans cette zone
   building: <a class="custom">&lt;RuineInfo&gt;</a>           //informations sur le bâtiment présent sur la zone   
}

<a class="entity">&lt;RuineInfo&gt;</a> {
   type: <span class="int">Int</span>,                      //L'id du bâtiment
   dig: <span class="int">Int</span>,                       //Le nombre de tas de sable sur le bâtiment
   name: <a class="custom">&lt;LangString&gt;</a>,             //Le nom du bâtiment
   desc: <a class="custom">&lt;LangString&gt;</a>,             //La description du bâtiment
   camped: <span class="bool">Bool</span>,                   //Si le bâtiment à été campé
   dried: <span class="bool">Bool</span>                     //L'assèchement du bâtiment
}

<a class="entity">&lt;ZoneInfo&gt;</a> {
   z: <span class="int">Int</span>,                         //Le nombre de zombies
   h: <span class="int">Int</span>,                         //Le nombre d'humain
   dried: <span class="bool">Bool</span>                     //L'assèchement de la zone
}

<a class="entity">&lt;User&gt;</a> {
   name: <span class="string">String</span>,                   //Nom du joueur
   isGhost: <span class="bool">Bool</span>,                  //si le joueur est incarné (false) ou non (true)
   twinId: <span class="int">Int</span>,                    //L'id twinoid s'il a lier son compte
   mapId: <span class="int">Int</span>,                     //Si incarné, l'id de ça ville
   map: <a class="custom">&lt;Map&gt;</a>,                     //Si incarné, un instance de Map
   homeMessage: <span class="string">String</span>,            //Texte personnel (sur l'âmes)
   avatar: <span class="string">String</span>,                 //URL de l'avatar du joueur
   hero: <span class="bool">Bool</span>,
   job: <a class="custom">&lt;Job&gt;</a>,
   dead: <span class="bool">Bool</span>,
   out: <span class="bool">Bool</span>,
   baseDef: <span class="int">Int</span>,
   ban: <span class="bool">Bool</span>,
   x: <span class="int">Int</span>,
   y: <span class="int">Int</span>,
   playedMaps: Array<a class="custom">&lt;Cadaver&gt;</a>      //La liste des anciennes incarnations
}

<a class="entity">&lt;Job&gt;</a> {
   id: <span class="int">Int</span>,                        //Id MyHordes
   uid: <span class="string">String</span>,                    //universal ID (ex: basic = habitant)
   name: <a class="custom">&lt;LangString&gt;</a>,             //Le nom du métier
   desc: <a class="custom">&lt;LangString&gt;</a>              //La description
}

<a class="entity">&lt;City&gt;</a> {
   name: <span class="string">String</span>,                   //Nom de la ville
   water: <span class="int">Int</span>,                     //Nombre de rations d'eau disponibles
   x: <span class="int">Int</span>,                         //position de la ville
   y: <span class="int">Int</span>,                         //position de la ville
   door: <span class="bool">Bool</span>,                     //flag qui précise si la porte de la ville est ouverte
   chaos: <span class="bool">Bool</span>,                    //flag qui précise que la ville est en chaos
   chaos: <span class="bool">Bool</span>,                    //flag qui précise que la ville est en chaos
   hard: <span class="bool">Bool</span>,                     //flag qui dit si la ville est pandémonium
   devast: <span class="bool">Bool</span>,                   //flag qui précise si la ville est dévastée
   chantiers: Array<a class="custom">&lt;Chantier&gt;</a>,     //liste complète des chantiers disponibles
   buildings: Array<a class="custom">&lt;Chantier&gt;</a>,     //liste des chantiers construits
   news: <a class="custom">&lt;News&gt;</a>,                   //dernière gazette avec informations sur l'attaque et la défense
   defense: <a class="custom">&lt;Defense&gt;</a>,             //informations sur la défense de la ville
   upgrades: <a class="custom">&lt;Upgrades&gt;</a>,           //Liste des amélioration dispo (pompe etc)
   estimations: <a class="custom">&lt;Estimations&gt;</a>,     //Estimation pour l'attaque du soir
   estimationsNext: <a class="custom">&lt;Estimations&gt;</a>, //Estimation pour l'attaque du lendemain ou rien si pas le Planificateur
   bank: Array<a class="custom">&lt;Item&gt;</a>               //items présents dans la banque
}

<a class="entity">&lt;Estimations&gt;</a> {
   days: <span class="int">Int</span>,                      //Le jours de l'estimations
   min: <span class="int">Int</span>,                       //L'attaque minimum
   max: <span class="int">Int</span>,                       //L'attaque maximum
   maxed: <span class="bool">Bool</span>
}

<a class="entity">&lt;Upgrades&gt;</a> {
   total: <span class="int">Int</span>,
   list: Array<a class="custom">&lt;CityUpgrade&gt;</a>
}

<a class="entity">&lt;CityUpgrade&gt;</a> {
   name: <a class="custom">&lt;LangString&gt;</a>,
   level: <span class="int">Int</span>,
   update: <span class="string">String</span>,
   buildingId: <span class="int">Int</span>
}

<a class="entity">&lt;Defense&gt;</a> {
   total: <span class="int">Int</span>,                     //défense totale
   base: <span class="int">Int</span>,                      //défense de base (10)
   buildings: <span class="int">Int</span>,                 //défense apportée par les constructions
   upgrades: <span class="int">Int</span>,                  //défense apportée par les évolutions
   items: <span class="int">Int</span>,                     //nombre d'OD
   itemsMul: <span class="int">Int</span>,                  //défense apportée par les OD
   citizen_homes: <span class="int">Int</span>,             //défense apportée par les maison
   citizen_guardians: <span class="int">Int</span>,         //défense apportée par les gardiens (ou nombre de gardiens)
   watchmen: <span class="int">Int</span>,                  //défense apportée par les veilleurs
   souls: <span class="int">Int</span>,                     //défense apportée par les âmes
   temp: <span class="int">Int</span>,                      //défense temporaire
   cadavers: <span class="int">Int</span>,                  //défense apportée par les cadavres
   guardiansInfos: <a class="custom">&lt;Guardians&gt;</a>,
   bonus: <span class="int">Int</span>
}

<a class="entity">&lt;Guardians&gt;</a> {
   guardians: <span class="int">Int</span>,                 //Nombre de gardiens
   def: <span class="int">Int</span>                        //Défense apportée par les gardiens
}

<a class="entity">&lt;News&gt;</a> {
   z: <span class="int">Int</span>,                         //Nombre de zombie à avoir attaqué
   def: <span class="int">Int</span>,                       //Nombre de points de défense
   content: <span class="string">String</span>,                //Texte de la gazette
   regenDir: <span class="string">String</span>,               //Direction de la regeneration du scrutateur ?
   water: <span class="int">Int</span>                      //Nombre de ration restante dans le puits ?
}

<a class="entity">&lt;Chantiers&gt;</a> {
   id: <span class="int">Int</span>,                        //Id du chantier
   icon: <span class="string">String</span>,
   name: <a class="custom">&lt;LangString&gt;</a>,
   desc: <a class="custom">&lt;LangString&gt;</a>,
   pa: <span class="int">Int</span>,                        //nombre de PA nécéssaires à sa construction
   life: <span class="int">Int</span>,                      //points de vie actuels du chantier (si pas construit = 0)
   maxLife: <span class="int">Int</span>,   
   votes: <span class="int">Int</span>,                     //votes récoltés pour ce chantier
   breakable: <span class="bool">Bool</span>,                //si ce bâtiment pourra être cassé après l'attaque
   def: <span class="int">Int</span>,                       //defense de ce bâtiment
   hasUpgrade: <span class="bool">Bool</span>,               //si ce bâtiment peut évoluer
   rarity:  <span class="string">String</span>,                //rareté du plan 
   temporary: <span class="bool">Bool</span>,                //bâtiment temporaire
   parent: <span class="int">Int</span>,                    //ID du bâtiment de la branche précédentes
   resources: array<a class="custom">&lt;Resources&gt;</a>,
   actions: <span class="int">Int</span>,
   hasLevels: <span class="bool">Bool</span>
}

<a class="entity">&lt;Resources&gt;</a> {
   amount: <span class="int">Int</span>,                    //Nombre de ressources nécésaire
   rsc: <a class="custom">&lt;Item&gt;</a>                     //Item nécésaire
}

<a class="entity">&lt;Item&gt;</a> {
   id: <span class="int">Int</span>, 
   name: <a class="custom">&lt;LangString&gt;</a>,
   count: <span class="int">Int</span>,
   broken: <span class="bool">Bool</span>,
   img: <span class="string">String</span>,
   cat: <a class="custom">&lt;LangString&gt;</a>,
   heavy: <span class="bool">Bool</span>,
   deco: <span class="int">Int</span>,
   guard: <span class="int">Int</span>,
   desc: <a class="custom">&lt;LangString&gt;</a>
}

<a class="entity">&lt;Cadaver&gt;</a> {
   id: <span class="int">Int</span>,                        //ID du joueur
   twinId: <span class="int">Int</span>,                    //ID twinoid du joueur
   mapId: <span class="int">Int</span>,                     //ID de la map
   survival: <span class="int">Int</span>,                  //nombre de jours survécus
   day: <span class="int">Int</span>,                       //Jour de la map
   avatar: <span class="string">String</span>,                 //Avatar du joueur
   name: <span class="string">String</span>,                   //nom du joueur
   mapName: <span class="string">String</span>,                //nom de la map
   season: <span class="int">Int</span>,                    //numéro de la saison
   v1: <span class="bool">Bool</span>,                       //vrai si ce cadavre provient de la V1 du jeu
   score: <span class="int">Int</span>,                     //score
   season: <span class="int">Int</span>,                    //saison de jeu concernée
   dtype: <span class="int">Int</span>,                     //identifiant de type de mort
   msg: <span class="string">String</span>,                    //message de mort
   comment: <span class="string">String</span>,                //commentaire
   cleanup : <a class="custom">&lt;CadaverCleanupInfo&gt;</a>
}

<a class="entity">&lt;CadaverCleanupInfo&gt;</a> {
   user: <span class="string">String</span>,                   //Nom du joueur qui s'est débarrassé du corps
   type: <span class="string">String</span>                    //Méthode : garbage, water, cook ou ghoul
}

<a class="entity">&lt;Expedition&gt;</a> {
   name: <span class="string">String</span>,                   //Nom de l'expedition
   author: <a class="custom">&lt;User&gt;</a>,                 //l'auteur
   length: <span class="int">Int</span>,                    //longueur de l'expédition
   points: Array<a class="custom">&lt;ExpeditionPoints&gt;</a> //points définisant le parcours
}

<a class="entity">&lt;ExpeditionPoints&gt;</a> {
   x: <span class="int">Int</span>,
   y: <span class="int">Int</span>
}

<a class="entity">&lt;LangString&gt;</a> {
   // all ISO 3166-1 alpha-2 country code put on "langues" field
   // ex :
   fr: <span class="string">String</span>,
   en: <span class="string">String</span>,
   de: <span class="string">String</span>,
   es: <span class="string">String</span>
}</pre>
            <h5>Example</h5>
            <p>For api/x/json/items, filters only accept UIDs. Currently, the UID is identique to img. But in the future, the UID will be replaced by real hordes ID.<br>Example to only recover the information of the “water ration” object:</p>
            <pre>api/x/json/items?fields=name&filters=water&langues=fr,es,en,de</pre>
            <p>Show :</p>
            <pre>&#123;&#10;   "water": &#123; // UID&#10;      "name": &#123;&#10;         "fr": "Ration d'eau",&#10;         "es": "Ración de agua",&#10;         "en": "Water Ration",&#10;         "de": "Ration Wasser"&#10;      &#125;&#10;   &#125;&#10;&#125;&#10;</pre>
        </div>
    </div>
    <style>#api-docs {font-family: "Century Gothic", "Arial", "Trebuchet MS", Verdana, sans-serif;color: white;font-size: 10pt;}#api-docs table {width: 100%;border-collapse: collapse;border-spacing: 0px;border: 0px;border-bottom: 2px solid #f0d79e;}#api-docs table th {vertical-align: bottom;border-bottom: 2px solid #f0d79e;}#api-docs table td {padding-left: 5px;padding-right: 5px;vertical-align: top;border: 0px;border-right: 1px solid #7e4d2a;border-bottom: 1px solid #7e4d2a;background-color: #5c2b20;}#api-docs table td a {font-weight: normal;}#api-docs h5 {font-size: 8pt;line-height: 17px;font-family: Verdana;text-transform: uppercase;}#api-docs pre {background-color: #4f2e1f;box-shadow: 0 0 2px #4E5162;color: #FFFFFF;display: block;overflow: auto;padding: 8px;white-space: pre;}</style>
    <style>#api-docs pre span.string {color:#eca4f1} #api-docs pre span.int {color:#76d8ca} #api-docs pre span.bool {color:#ee7c2b} #api-docs pre a.custom {text-decoration:underline;color:#00e0e0}#api-docs pre a.entity {text-decoration:underline;color:#ddab76}</style>
{% endblock %}