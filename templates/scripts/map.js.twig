{# @var routes \App\Entity\ExpeditionRoute[] #}
const known_routes = { {% for route in map.routes %}{{ route.id }}: {{ route.data|json_encode|raw }},{% endfor %} }

const mark_zone = function(map, x = null, y = null, manual = false) {
    let svg_group = map.querySelector('svg g[x-local-id="map-marker-layer"]');
    if (!svg_group) return false;

    let child = null;
    while ((child = svg_group.lastElementChild)) {
        svg_group.removeChild(child);
    }

    let marker_direction = map.querySelector('.marker-direction');
    if (marker_direction) marker_direction.style.display = 'none';

    const last_zone = $.client.get('marker','routes',null);
    $.client.set('marker','routes',null,false);
    if (last_zone && last_zone[0] === x && last_zone[1] === y && manual) return;
    if (x === {{ map.pos_x }} && y === {{ map.pos_y }}) return;

    if (x === null || y === null) return;
    $.client.set('marker','routes',[x,y],false);

    if (marker_direction) {
        const d_x = x - {{ map.pos_x }}; const d_y = {{ map.pos_y }} - y;
        if (d_x !== 0 || d_y !== 0) {
            const angle = Math.round(Math.acos( d_y / Math.sqrt( d_x*d_x + d_y*d_y ) ) * 57.2957795);
            marker_direction.style.transform = 'rotate(' + ((d_x > 0) ? 360 - angle : angle) + 'deg)';
            marker_direction.style.display = 'block';
        }
    }

    let new_rect = document.createElementNS("http://www.w3.org/2000/svg",'rect');
    new_rect.setAttribute('x', "" + x); new_rect.setAttribute('y', "" + y);
    new_rect.setAttribute('height', "1"); new_rect.setAttribute('width', "1");
    new_rect.setAttribute('style', 'fill: transparent; opacity: 0.5; stroke: white; stroke-width: 0.08;');
    svg_group.appendChild( new_rect );
}

const render_routes = function(map, target, color, nodes) {

    if (!nodes) nodes = [];

    let svg_group = map.querySelector('svg g[x-local-id="map-expedition-' + target + '"]');
    if (!svg_group) return false;

    let child = null;
    while ((child = svg_group.lastElementChild)) {
        svg_group.removeChild(child);
    }

    let filtered = [];
    for (let i = 0; i < nodes.length; i++)
        if (filtered.length === 0 || (nodes[i][0] !== filtered[filtered.length-1][0] || nodes[i][1] !== filtered[filtered.length-1][1]))
            filtered.push( nodes[i] );

    let b = filtered.length >= 2;
    for (let i = 0; i < filtered.length; i++) {

        let new_point = document.createElementNS("http://www.w3.org/2000/svg",'circle');
        new_point.setAttribute('cx', "" + (filtered[i][0] + 0.5)); new_point.setAttribute('cy', "" + (filtered[i][1] + 0.5));
        new_point.setAttribute('r', "0.12");
        new_point.setAttribute('style', 'fill: ' + color + ';');
        svg_group.appendChild( new_point );

        if (i === 0) continue;

        if (filtered[i][0] === filtered[i-1][0] || filtered[i][1] === filtered[i-1][1]) {
            let new_line = document.createElementNS("http://www.w3.org/2000/svg",'line');
            new_line.setAttribute('x1', "" + (filtered[i-1][0] + 0.5)); new_line.setAttribute('y1', "" + (filtered[i-1][1] + 0.5));
            new_line.setAttribute('x2', "" + (filtered[i][0] + 0.5)); new_line.setAttribute('y2', "" + (filtered[i][1] + 0.5));
            new_line.setAttribute('style', 'stroke: ' + color + '; stroke-width: 0.12;');
            svg_group.appendChild( new_line );
        } else b = false;
    }

    return b;
}

const activate_route = function(map, color, id) {
    const r = render_routes( map, 'focus', color, known_routes[id] );

    let mv = map.querySelectorAll('.zone-plane-controls>.action-move');
    for (let i = 0; i < mv.length; i++) mv[i].classList.remove('on-route');

    if (r) {

        const route = known_routes[id];
        let nodes = [ ]; let target = []; let maybe = []; let hit = false;

        const push = function(x,y) {
            const d = Math.abs(x - {{ map.pos_x }}) + Math.abs(y - {{ map.pos_y }});
            if ( d === 1 ) {
                if      (x < {{ map.pos_x }}) {if (hit) target.push('west');  else maybe.push('west'); }
                else if (x > {{ map.pos_x }}) {if (hit) target.push('east');  else maybe.push('east'); }
                else if (y > {{ map.pos_y }}) {if (hit) target.push('north'); else maybe.push('north');}
                else if (y < {{ map.pos_y }}) {if (hit) target.push('south'); else maybe.push('south');}
            }
            hit = d === 0;

            if (nodes.length === 0 || (nodes[ nodes.length - 1 ][0] !== x || nodes[ nodes.length - 1 ][1] !== y)) nodes.push( [x,y] )
        };
        push(route[0][0], route[0][1])

        for (let i = 1; i < route.length; i++) {
            const current = nodes[ nodes.length - 1 ];

            if      (current[0] < route[i][0]) for (let x = current[0]; x <= route[i][0]; x++ ) push(x,current[1]);
            else if (current[0] > route[i][0]) for (let x = current[0]; x >= route[i][0]; x-- ) push(x,current[1]);
            else if (current[1] < route[i][1]) for (let y = current[1]; y <= route[i][1]; y++ ) push(current[0],y);
            else if (current[1] > route[i][1]) for (let y = current[1]; y >= route[i][1]; y-- ) push(current[0],y);
        }

        let z = null;
        if (target.length > 0)
            for (let i = 0; i < target.length; i++) {
                if ((z = map.querySelector('.zone-plane-controls>.action-move-' + target[i]))) z.classList.add('on-route');
            }

        else if (!hit && maybe.length > 0)
            for (let i = 0; i < maybe.length; i++) {
                if ((z = map.querySelector('.zone-plane-controls>.action-move-' + maybe[i]))) z.classList.add('on-route');

            }
    }
}

let scroll_areas = document.querySelectorAll('.map>.scroll-plane');
for (let i = 0; i < scroll_areas.length; i++) {
    let scroll_area = scroll_areas[i];
    let map_area = scroll_area.parentNode;
    let map = map_area.parentNode;
    let map_controls = map.querySelector('.controls');
    let zone_plane = map.querySelector('.zone-plane');
    let route_plane = map.querySelector('.routes-plane');

    map_area.addEventListener('dragstart', function(e) { e.preventDefault(); });

    map_area.addEventListener('x-resize', function() {
        scroll_area.style.minWidth
            = (parseFloat(scroll_area.getAttribute('x-current-scroll-level')) * parseFloat(scroll_area.getAttribute('x-default-size'))) + 'px';
        scroll_area.setAttribute('x-scroll-range-x', "" + Math.max(0,scroll_area.clientWidth - map_area.clientWidth));
        scroll_area.setAttribute('x-scroll-range-y', "" + Math.max(0,scroll_area.clientHeight - map_area.clientHeight));
        map_area.dispatchEvent(new Event("x-center", { bubbles: false, cancelable: true }));
    })

    map_area.addEventListener('x-center', function() {

        let scroll_pos_x = 0;
        let scroll_pos_y = 0;

        let current_zone = scroll_area.querySelector('.zone.active');
        if (current_zone) {
            scroll_pos_x = Math.min(Math.max(0,(current_zone.offsetLeft + current_zone.clientWidth/2 ) - map_area.clientWidth /2), parseInt(scroll_area.getAttribute('x-scroll-range-x')));
            scroll_pos_y = Math.min(Math.max(0,(current_zone.offsetTop  + current_zone.clientHeight/2) - map_area.clientHeight/2), parseInt(scroll_area.getAttribute('x-scroll-range-y')));
        }

        scroll_area.setAttribute('x-scroll-pos-x', "" + scroll_pos_x);
        scroll_area.setAttribute('x-scroll-pos-y', "" + scroll_pos_y);
        scroll_area.style.top  = -scroll_pos_y + 'px';
        scroll_area.style.left = -scroll_pos_x + 'px';
    });

    let touch_coords = []; let touch_id = null;
    scroll_area.addEventListener('touchstart', function(e) {
        if (touch_id !== null) return;
        let touches = e.changedTouches;
        if (touches.length == 0) return;
        touch_id = touches[0].identifier;
        touch_coords = [ touches[0].clientX, touches[0].clientY ];
    });

    scroll_area.addEventListener('touchend', function(e) {
        if (touch_id === null) return;
        let touches = e.changedTouches;
        for (let i = 0; i < touches.length; i++)
            if (touches[i].identifier === touch_id) {
                touch_id = null;
                return;
            }
    });

    const map_move = function(x,y) {
        const scroll_range_x = parseInt(scroll_area.getAttribute('x-scroll-range-x'));
        const scroll_range_y = parseInt(scroll_area.getAttribute('x-scroll-range-y'));
        let scroll_pos_x = parseInt(scroll_area.getAttribute('x-scroll-pos-x'));
        let scroll_pos_y = parseInt(scroll_area.getAttribute('x-scroll-pos-y'));

        if (scroll_range_x <= 0 || scroll_range_y <= 0) return;
        scroll_pos_x = Math.max(Math.min(scroll_range_x, scroll_pos_x - x), 0);
        scroll_pos_y = Math.max(Math.min(scroll_range_y, scroll_pos_y - y), 0);
        scroll_area.setAttribute('x-scroll-pos-x', "" + scroll_pos_x);
        scroll_area.setAttribute('x-scroll-pos-y', "" + scroll_pos_y);
        scroll_area.style.top  = -scroll_pos_y + 'px';
        scroll_area.style.left = -scroll_pos_x + 'px';
    };

    scroll_area.addEventListener('touchmove', function(e) {
        if (touch_id === null) return;
        let touches = e.changedTouches;
        for (let i = 0; i < touches.length; i++)
            if (touches[i].identifier === touch_id) {
                map_move( touches[i].clientX - touch_coords[0], touches[i].clientY - touch_coords[1] );
                touch_coords = [ touches[0].clientX, touches[0].clientY ];
                e.preventDefault();
                return;
            }
    });

    scroll_area.addEventListener('mousemove', function(e) {
        if (e.buttons === 1)
            map_move( e.movementX, e.movementY );
    });

    if (map_controls) {

        let plus_button  = map_controls.querySelector('[x-control="plus"]');
        let minus_button = map_controls.querySelector('[x-control="minus"]');
        let center_button = map_controls.querySelector('[x-control="center"]');

        let map_button  = map_controls.querySelector('[x-control="map"]');
        let zone_button = map_controls.querySelector('[x-control="zone"]');
        let route_button = map_controls.querySelector('[x-control="routes"]');

        if (plus_button)
            plus_button.addEventListener('click', function() {
                let current_level = parseFloat(scroll_area.getAttribute('x-current-scroll-level'));
                if (minus_button)  minus_button.removeAttribute('disabled');
                if (center_button) center_button.removeAttribute('disabled');
                if (current_level <= 0 && parseFloat(scroll_area.getAttribute('x-default-size')) > map_area.clientWidth) current_level = 1;
                else {
                    plus_button.setAttribute('disabled','');
                    current_level = 1.5;
                }
                scroll_area.setAttribute('x-current-scroll-level', '' + current_level);
                map_area.dispatchEvent(new Event("x-resize", { bubbles: false, cancelable: true }));
            })
        if (minus_button)
            minus_button.addEventListener('click', function() {
                let current_level = parseFloat(scroll_area.getAttribute('x-current-scroll-level'));
                if (plus_button) plus_button.removeAttribute('disabled');
                if (current_level > 1 && parseFloat(scroll_area.getAttribute('x-default-size')) > map_area.clientWidth) current_level = 1;
                else {
                    minus_button.setAttribute('disabled','');
                    if (center_button) center_button.setAttribute('disabled','');
                    current_level = 0;
                }
                scroll_area.setAttribute('x-current-scroll-level', '' + current_level);
                map_area.dispatchEvent(new Event("x-resize", { bubbles: false, cancelable: true }));
            })
        if (center_button)
            center_button.addEventListener('click', function() {
                map_area.dispatchEvent(new Event("x-center", { bubbles: false, cancelable: true }));
            })
        if (zone_button)
            zone_button.addEventListener('click', function() {
                map.classList.add('zone-viewer-mode');
                route_plane.classList.add('hidden');
            });
        if (route_button)
            route_button.addEventListener('click', function() {
                if (route_plane.classList.contains('hidden')) route_plane.classList.remove('hidden');
                else route_plane.classList.add('hidden');
            });
        if (map_button)
            map_button.addEventListener('click', function() {
                map.classList.remove('zone-viewer-mode');
            })
    }

    let route_selectors = route_plane.querySelectorAll('[x-route-id]');
    for (let i = 0; i < route_selectors.length; i++)
        route_selectors[i].addEventListener('click', function () {
            const old_route = $.client.get('current','routes');
            const new_route = old_route == route_selectors[i].getAttribute('x-route-id') ? null : route_selectors[i].getAttribute('x-route-id');
            activate_route( map, '#b4da4c', new_route );
            $.client.set('current','routes',new_route,false);
            route_plane.classList.add('hidden');
        });


    const generate_zone_event = function(type, zone_element, original) {
        return new CustomEvent(type, {
            detail: {
                zone: zone_element,
                x: parseInt(zone_element.getAttribute('x-zone-x')),
                y: parseInt(zone_element.getAttribute('x-zone-y')),
                originalEvent: original
            }
        });
    };
    let zones = scroll_area.querySelectorAll('.zone[x-zone-x][x-zone-y]');
    for (let i = 0; i < zones.length; i++) {
        zones[i].addEventListener('pointerenter', function(e) { map.dispatchEvent( generate_zone_event( 'zone-pointerenter', zones[i], e ) ) });
        zones[i].addEventListener('pointerleave', function(e) { map.dispatchEvent( generate_zone_event( 'zone-pointerleave', zones[i], e ) ) });
        zones[i].addEventListener('click',        function(e) { map.dispatchEvent( generate_zone_event( 'zone-click',        zones[i], e ) ) });
    }

    map_area.dispatchEvent(new Event("x-resize", { bubbles: false, cancelable: true }));

    const add_move_handler = function( element ) {
        if (element)
            element.addEventListener('click', function() {
                const px = parseInt(element.getAttribute('x-target-x'));
                const py = parseInt(element.getAttribute('x-target-y'));
                const dx = parseInt(element.getAttribute('x-direction-x'));
                const dy = parseInt(element.getAttribute('x-direction-y'));

                map_area.querySelector('.zone-plane-controls').classList.add('hide');
                $.ajax.easySend( '{{ path('beyond_desert_move_controller') }}', {
                        x: px, y: py
                    },
                    function () {
                        zone_plane.style.left = (-200 + dx * -50) + '%';
                        zone_plane.style.top =  (-200 + dy *  50) + '%';
                        setTimeout(function() { $.ajax.load(null, '{{ path('beyond_dashboard') }}', true); }, 1000)
                    }, null, function() {
                        map_area.querySelector('.zone-plane-controls').classList.remove('hide');
                    } );
            });
    }

    const user_active_route = $.client.get('current','routes');
    if (user_active_route !== null && known_routes[user_active_route])
        activate_route( map, '#b4da4c', user_active_route );
    const active_marker = $.client.get('marker','routes',null);
    if (active_marker !== null)
        mark_zone( map, active_marker[0], active_marker[1], false );
    else mark_zone( map );


    add_move_handler( map_area.querySelector('.zone-plane-controls>.action-move-north') );
    add_move_handler( map_area.querySelector('.zone-plane-controls>.action-move-south') );
    add_move_handler( map_area.querySelector('.zone-plane-controls>.action-move-east')  );
    add_move_handler( map_area.querySelector('.zone-plane-controls>.action-move-west')  );
}