{{ include('scripts/actions_animate.js.twig') }}

item_action_collapse('actions','x-item-action-toggle');
{% if no_heroic is not defined %}
    item_action_collapse('heroic_actions','x-heroic-toggle');
{% endif %}

let camping = document.querySelectorAll('.camping_actions');

const handleSpecialActions = function( actions, api_path, return_path, content = null ) {
    for (let i = 0; i < actions.length; i++) {
        actions[i].addEventListener('click', function() {
            const target_id = this.getAttribute('x-target-id');
            const action_id = this.getAttribute('x-action-id');
            let obj = { action: action_id };
            if (target_id) obj.target = target_id;
            $.ajax.easySend( api_path, obj,
                function (data) {
                    if(data.url)
                        return_path = data.url;
                    $.ajax.no_history().load(content, return_path);
                }, {
                    '{{ constant('App\\Service\\ActionHandler::ErrorActionForbidden') }}': function(data) {
                        return data.message ? data.message : '{{ 'Das kannst du zur Zeit nicht tun.'|trans({},'game')|e('js') }}'
                    }
                } );
        });
    }
}

const handleHeroicActions = function( actions, api_path, return_path, content = null ) {
    for (let i = 0; i < actions.length; i++) {
        if (actions[i].hasAttribute('x-collection-target')) {
            let targets = [], values = [];
            let ids = {};

            const message = actions[i].getAttribute('x-confirm-msg');

            const update_button = () => {
                if (targets.length > 0 && targets.filter(v=>v).length === targets.length) {
                    actions[i].removeAttribute('disabled');
                    actions[i].setAttribute('x-target-id', targets.join(';'))
                    let tmp = message;
                    values.forEach( ([key,value]) => tmp = tmp.replaceAll('{target' + key + '}', value) );
                    actions[i].setAttribute('x-confirm-msg', tmp)
                }
                else {
                    actions[i].setAttribute('disabled', '1');
                    actions[i].setAttribute('x-target-id', '?');
                }
                return true;
            }

            document.querySelectorAll('input[x-collection-for="' + actions[i].getAttribute('x-collection-target') + '"]').forEach(sub => {
                const cat = sub.value.split('-')[0];
                if (typeof ids[cat] === 'undefined')
                    ids[cat] = targets.length;
                targets[ids[cat]] = null;
                values[ids[cat]] = [cat,'?'];
                sub.addEventListener('click', () => (targets[ids[cat]] = sub.value) && (values[ids[cat]][1] = sub.getAttribute('title')) && update_button() );
            });

            update_button();
        }

        actions[i].addEventListener('click', function() {
            const target_id = this.getAttribute('x-target-id');
            const action_id = this.getAttribute('x-action-id');
            const do_confirm = this.getAttribute('x-action-confirm') === "1";
            let confirm_msg = this.getAttribute('x-confirm-msg');

            if(confirm_msg == null) confirm_msg = '{{ 'Bestätigen?'|trans({},'global')|e('js') }}';
            let obj = { action: action_id };
            if (target_id) obj.target = target_id;
            if (do_confirm && !confirm(confirm_msg))
                return;
            $.ajax.easySend( api_path, obj,
                function () {
                    $.ajax.no_history().load(content, return_path);
                }, {
                    '{{ constant('App\\Service\\ActionHandler::ErrorActionForbidden') }}': function(data) {
                        return data.message ? data.message : '{{ 'Das kannst du zur Zeit nicht tun.'|trans({},'game')|e('js') }}'
                    }
                } );
        });
    }
}

const handleCampingActions = function( actions, api_path, return_path, content = null ) {
  for (let i = 0; i < actions.length; i++) {
    actions[i].addEventListener('click', function() {
      const action_id = this.getAttribute('x-action-id');
      let obj = { action: action_id };
      $.ajax.easySend( api_path, obj,
                       function () {
                         $.ajax.no_history().load(content, return_path);
                       }, {
                         '{{ constant('App\\Service\\ActionHandler::ErrorActionForbidden') }}': function(data) {
                           return data.message ? data.message : '{{ 'Das kannst du zur Zeit nicht tun.'|trans({},'game')|e('js') }}'
                         }
                       } );
    });
  }
}

const handleActions = function( actions, api_path, return_path, content = null ) {
    for (let i = 0; i < actions.length; i++) {
        actions[i].addEventListener('click', function() {
            const item_id   = this.getAttribute('x-provoking-id');
            const target_id = this.getAttribute('x-target-id');
            const action_id = this.getAttribute('x-action-id');
            const esc_c_id = this.getAttribute('x-citizen');
            const esc_m_id = this.getAttribute('x-escort-meta-action');
            const do_confirm = this.getAttribute('x-action-confirm') === "1";
            if (do_confirm && !confirm('{{ 'Bestätigen?'|trans({},'global')|e('js') }}'))
                return;
            let obj = (esc_c_id && esc_m_id)
                ? { item: item_id, action: action_id, citizen: esc_c_id, meta: esc_m_id }
                : { item: item_id, action: action_id };
            if (target_id) obj.target = target_id;
            $.ajax.easySend( api_path, obj,
                function (data) {
                    if(data.url)
                        return_path = data.url;
                    $.ajax.no_history().load(content, return_path);
                }, {
                    '{{ constant('App\\Service\\ActionHandler::ErrorActionForbidden') }}': function(data) {
                        return data.message ? data.message : '{{ 'Das kannst du zur Zeit nicht tun.'|trans({},'game')|e('js') }}'
                    }
                } );
        });
    }
}
const handleActionPopups = function( actions ) {
    for (let i = 0; i < actions.length; i++) {
        const id = actions[i].getAttribute( 'x-target-definition' );
        let popup = document.querySelector('[x-target-selection-for="' + id + '"]');
        popup?.addEventListener('click', function(e) { e.stopPropagation(); });
        actions[i].addEventListener('click', function() {
            document.querySelectorAll('[x-target-definition]').forEach(e => {
                e.classList.remove('open');
            });
            document.querySelectorAll('[x-target-selection-for]').forEach(e => {
                e.style.display = "none";
            });

            popup.style.display = 'block';
            actions[i].classList.add('open');
        })
        let close_btn = document.querySelector('[x-close-for="' + id + '"]');
        close_btn.addEventListener('click', function(e) {
            popup.style.display = "none";
            actions[i].classList.remove('open');
            e.stopPropagation();
        });
    }
}
const handleRecipes = function( recipes, api_path, return_path, content = null ) {
    for (let i = 0; i < recipes.length; i++) {
        recipes[i].addEventListener('click', function() {
            const recipe_id = this.getAttribute('x-recipe-id');
            $.ajax.easySend( api_path, {
                    id: recipe_id
                },
                function () {
                    $.ajax.load(content, return_path);
                }, {
                    '{{ constant('App\\Service\\ActionHandler::ErrorActionForbidden') }}': function(data) {
                        return data.message ? data.message : '{{ 'Das kannst du zur Zeit nicht tun.'|trans({},'game')|e('js') }}'
                    }
                }
            );
        });
    }
}