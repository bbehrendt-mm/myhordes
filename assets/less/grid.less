@import (once) "mixins";

// Variables
@myhordes-grid-columns: 12;

@myhordes-grid-padsize: 5px;
@myhordes-grid-padsize-small: 2px;

@myhordes-flex-columns: 12;

@myhordes-flex-size-increment:  1;
@myhordes-flex-size-max:       10;

// Grid Classes
* {
  box-sizing: border-box;
  &::before,&::after {box-sizing: border-box;}
}

.grid(@n;@class:'';@i:0) when (@i = 0) and (@class = '') {
  &.rw-@{i} {display: none}
  &.ro-@{i} {margin-left: 0;}
  .grid(@n, @class, (@i + 1))
}
.grid(@n;@class:'';@i:0) when (@i <= @n) and (@class = '') {
  &.rw-@{i} {width: (@i * 100% / @n);}
  &.ro-@{i} {margin-left: (@i * 100% / @n);}
  .grid(@n, @class, (@i + 1))
}
.grid(@n;@class:'';@i:0) when (@i = 0) and not (@class = '') {
  &.rw-@{class}-@{i} {display: none}
  &.ro-@{class}-@{i} {margin-left: 0;}
  .grid(@n, @class, (@i + 1))
}
.grid(@n;@class:'';@i:0) when (@i <= @n) and not (@class = '') {
  &.rw-@{class}-@{i} {width: (@i * 100% / @n);}
  &.ro-@{class}-@{i} {margin-left: (@i * 100% / @n);}
  .grid(@n, @class, (@i + 1))
}

.row {
  &::before, &::after {content: " "; clear: both;}
  &::before { display: table;}
  &::after {display: block; height: 0;}
  >.cell,.cell-small {
    display: inline-block; float: left; position: relative;
    &.padded       {padding: @myhordes-grid-padsize;}
    &.padded-small {padding: @myhordes-grid-padsize-small;}
    &.padded-none  {padding: 0}
    &::before, &::after {clear: both;}
    &::before {content: " "; display: table;}
  }
  >.cell {.grid(@myhordes-grid-columns)}
  >.cell-small {.grid(@myhordes-grid-columns * 2)}
}

.row-table {
  &>.row.header, &>.row-flex.header {
    font-variant: small-caps; font-weight: bold;
    background: linear-gradient(to top, #643b25 0%, rgba(100, 59, 37, 0) 50%, rgba(100, 59, 37, 0) 100%);
    &.row-flex { align-items: end }
  }
  &>.row:not(.header), &>.row-flex:not(.header) {
    &:not(.highlight) {
      &:nth-child(2n+0) { background: #5c2b20; }
      &:nth-child(2n+1) { background: #663024; }
    }
    &.highlight {
      &:nth-child(2n+0) { background: #3c3a4a; }
      &:nth-child(2n+1) { background: #434153; }
    }
  }
}

.note .row-table>.row.header { background: none; }

.flex-sizing(@n;@class:'';@i:0) when (@i <= @n) and (@class = '') {
  &.shrink-@{i} { flex-shrink: @i }
  &.grow-@{i}   { flex-grow: @i }
  &.factor-@{i}   { flex-shrink: @i; flex-grow: @i }
  .flex-sizing(@n, @class, @i+1 )
}

.flex-sizing(@n;@class:'';@i:0) when (@i <= @n) and not (@class = '') {
  &.shrink-@{class}-@{i} { flex-shrink: @i }
  &.grow-@{class}-@{i}   { flex-grow: @i }
  &.factor-@{class}-@{i}   { flex-shrink: @i; flex-grow: @i }
  .flex-sizing(@n, @class, @i+1 )
}

.flex-grid(@n;@class:'';@i:0) when (@i = 0) and (@class = '') {
  &.rw-@{i} {display: none}
  .flex-grid(@n, @class, (@i + 1))
}
.flex-grid(@n;@class:'';@i:0) when (@i <= @n) and (@class = '') {
  &.rw-@{i} {flex-basis: (@i * 100% / @n);}
  .flex-grid(@n, @class, (@i + 1))
}
.flex-grid(@n;@class:'';@i:0) when (@i = 0) and not (@class = '') {
  &.rw-@{class}-@{i} {display: none}
  .flex-grid(@n, @class, (@i + 1))
}
.flex-grid(@n;@class:'';@i:0) when (@i <= @n) and not (@class = '') {
  &.rw-@{class}-@{i} {flex-basis: (@i * 100% / @n);}
  .flex-grid(@n, @class, (@i + 1))
}

.row-flex {
  &:not(.inline) {display: flex; }
  &.inline {display: inline-flex;}

  &:not(.wrap):not(.wrap-inverse) { flex-wrap: nowrap; }
  &.wrap { flex-wrap: wrap; }
  &.gap { gap: @myhordes-grid-padsize }
  &.gap-small { gap: @myhordes-grid-padsize-small }
  &.gap-none { gap: 0 }
  &.wrap-inverse { flex-wrap: wrap-reverse; }

  &.h-center { justify-content: center; }
  &.left     { justify-content: flex-start; }
  &.space    { justify-content: space-between; }
  &.right    { justify-content: flex-end; }
  &.v-center { align-items: center; }
  &.top      { align-items: flex-start; }
  &.bottom   { align-items: flex-end; }
  &.stretch  { align-items: stretch; }

  &:not(inverse):not(.vertical) { flex-direction: row; }
  &.inverse:not(.vertical)      { flex-direction: row-reverse; }
  &:not(inverse).vertical       { flex-direction: column; }
  &.inverse.vertical            { flex-direction: column-reverse; }

  >.cell, >.cell-small { .flex-sizing(@myhordes-flex-size-max); }
  >.cell {.flex-grid(@myhordes-flex-columns)}
  >.cell-small {.flex-grid(@myhordes-flex-columns * 2)}
}

.row, .row-flex {

  .my { margin: @myhordes-grid-padsize 0 }
  .mx { margin: 0 @myhordes-grid-padsize }
  .m { margin: @myhordes-grid-padsize }

  &>.cell,.cell-small {
    &.padded       {padding: @myhordes-grid-padsize;}
    &.padded-small {padding: @myhordes-grid-padsize-small;}
    &.padded-none  {padding: 0}
  }
}